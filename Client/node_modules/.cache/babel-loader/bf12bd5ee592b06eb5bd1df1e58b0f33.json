{"ast":null,"code":"import _defineProperty from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\src\\\\components\\\\home\\\\MessageBox.js\";\nimport React, { Component, Fragment } from 'react';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport FriendChatBox from './FriendChatBox';\nimport FriendMessage from './FriendMessage';\nimport '../user/css/UserAllPage.css';\nimport './css/MessageBox.css';\nimport { connect } from 'react-redux';\nimport { fetchAllChatFriendsAction, updateUserStatusAction } from '../../store/actions/userActions';\nimport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction } from '../../store/actions/messageActions';\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nvar MessageBox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MessageBox, _Component);\n\n  function MessageBox(props) {\n    var _this;\n\n    _classCallCheck(this, MessageBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MessageBox).call(this, props));\n\n    _this.initializeWebSocketConnection = function () {\n      var ws = new SockJS(_this.serverUrl);\n      _this.stompClient = Stomp.over(ws);\n\n      var headers = _this.getAuthHeader();\n\n      _this.stompClient.connect(headers, function (frame) {\n        if (_this._isMounted) {\n          _this.setState({\n            clientConnected: true\n          });\n\n          _this.stompClient.subscribe(\"/user/queue/position-update\", function (message) {\n            if (message.body) {\n              var messageBody = JSON.parse(message.body);\n\n              if (_this._isMounted && (messageBody.fromUserId === _this.state.chatUserId || messageBody.fromUserId === userService.getUserId())) {\n                _this.props.addMessage(messageBody);\n              }\n\n              if (messageBody.fromUserId !== userService.getUserId()) {\n                var formattedUserNames = userService.formatUsername(messageBody.fromUserFirstName, messageBody.fromUserLastName);\n                toast.info(React.createElement(ToastComponent.infoToast, {\n                  text: \"You have a new message from \".concat(formattedUserNames, \"!\"),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 148\n                  },\n                  __self: this\n                }), {\n                  position: toast.POSITION.TOP_RIGHT\n                });\n\n                _this.props.loadAllUnreadMessages();\n              }\n            }\n          });\n\n          _this.stompClient.subscribe(\"/chat/login\", function (message) {\n            if (message.body) {\n              var parsedBody = JSON.parse(message.body);\n\n              _this.changeUserOnlineStatus(parsedBody);\n            }\n          });\n\n          _this.stompClient.subscribe(\"/chat/logout\", function (message) {\n            if (message.body) {\n              var parsedBody = JSON.parse(message.body);\n\n              _this.changeUserOnlineStatus(parsedBody);\n            }\n          });\n        }\n      }, function () {\n        toast.error(React.createElement(ToastComponent.errorToast, {\n          text: \"Lost connection to \".concat(_this.serverUrl, \". Refresh the page to reconnect.\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        }); //// Callback for automatically reconnecting to the server\n        // setTimeout(() => {\n        //     toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Trying to reconnect.`} />, {\n        //         position: toast.POSITION.TOP_RIGHT\n        //     });\n        //     this.initializeWebSocketConnection();\n        // }, 10000);\n      });\n    };\n\n    _this.getAuthHeader = function () {\n      var token = localStorage.getItem(\"token\");\n      return token && token.length ? {\n        'Authorization': \"Bearer \".concat(token)\n      } : {};\n    };\n\n    _this.getAllMessages = function (chatUserId) {\n      _this.props.fetchAllMessages(chatUserId);\n    };\n\n    _this.loadAllChatFriends = function () {\n      var userId = userService.getUserId();\n\n      _this.props.loadAllChatFriends(userId);\n    };\n\n    _this.handleBlur = function (field) {\n      return function (event) {\n        _this.setState({\n          touched: _objectSpread({}, _this.state.touched, _defineProperty({}, field, true))\n        });\n      };\n    };\n\n    _this.validate = function (content) {\n      return {\n        content: content.length === 0\n      };\n    };\n\n    _this.changeHeight = function () {\n      var userBoxHeight = _this.state.userBoxHeight;\n\n      if (userBoxHeight === '') {\n        _this.setState({\n          userBoxHeight: 'toggle'\n        });\n      } else {\n        _this.setState({\n          userBoxHeight: ''\n        });\n      }\n    };\n\n    _this.changeChatBoxHeight = function () {\n      var chatBoxHeight = _this.state.chatBoxHeight;\n\n      if (chatBoxHeight === '') {\n        _this.setState({\n          chatBoxHeight: 'toggle-chat-container'\n        });\n      } else {\n        _this.setState({\n          chatBoxHeight: ''\n        });\n      }\n    };\n\n    _this.changeChatBoxDisplay = function () {\n      var chatBoxDisplay = _this.state.chatBoxDisplay;\n\n      if (chatBoxDisplay === '') {\n        _this.setState({\n          chatBoxDisplay: 'display-none'\n        });\n      } else {\n        _this.setState({\n          chatBoxDisplay: ''\n        });\n      }\n    };\n\n    _this.showUserChatBox = function (data, event) {\n      var id = data.id,\n          firstName = data.firstName,\n          lastName = data.lastName,\n          profilePicUrl = data.profilePicUrl;\n      var chatUserNameFormatted = userService.formatUsername(firstName, lastName, 18);\n\n      _this.setState({\n        chatUserId: id,\n        chatUserFirstName: firstName,\n        chatUserLastName: lastName,\n        chatUserNameFormatted: chatUserNameFormatted,\n        chatUserProfilePicUrl: profilePicUrl,\n        shouldScrollDown: true,\n        chatBoxDisplay: '',\n        chatBoxHeight: '',\n        content: ''\n      }, function () {\n        _this.getAllMessages(id);\n      });\n    };\n\n    _this.closeUserChatBox = function () {\n      _this.setState({\n        chatBoxDisplay: 'display-none'\n      });\n    };\n\n    _this.getOnlineUserCount = function () {\n      var usersCount = _this.props.friendsChatArr.filter(function (user) {\n        return user.online === true;\n      });\n\n      return usersCount.length;\n    };\n\n    _this.state = {\n      loggedInUserId: '',\n      chatUserId: '',\n      chatUserFirstName: '',\n      chatUserLastName: '',\n      chatUserNameFormatted: '',\n      chatUserProfilePicUrl: '',\n      userBoxHeight: 'toggle',\n      chatBoxHeight: '',\n      chatBoxDisplay: 'display-none',\n      content: '',\n      shouldScrollDown: false,\n      friendsArrLength: 0,\n      clientConnected: false,\n      touched: {\n        content: false\n      }\n    };\n    _this._isMounted = false;\n    _this.serverUrl = userService.getBaseUrl() + '/socket';\n    _this.stompClient = null;\n    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onChangeHandler = _this.onChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmitHandler = _this.onSubmitHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showUserChatBox = _this.showUserChatBox.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.changeChatBoxDisplay = _this.changeChatBoxDisplay.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getAllMessages = _this.getAllMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadAllChatFriends = _this.loadAllChatFriends.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MessageBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = userService.getUserId();\n      this.setState({\n        loggedInUserId: userId\n      });\n      this.initializeWebSocketConnection();\n      this.loadAllChatFriends();\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (this.props.allMessagesArr !== prevProps.allMessagesArr) {\n        this.setState({\n          content: ''\n        }, function () {\n          if (_this2.state.shouldScrollDown) {\n            _this2.scrollDown();\n          } else {\n            _this2.setState({\n              shouldScrollDown: true\n            }, _this2.scrollTop());\n          }\n        });\n      }\n\n      if (this.props.friendsChatArr.length !== prevProps.friendsChatArr.length) {\n        this.setState({\n          chatBoxDisplay: 'display-none'\n        });\n      }\n\n      if (this.props.triggerMessageLoad !== prevProps.triggerMessageLoad) {\n        var userData = this.props.triggerMessageLoad;\n        this.showUserChatBox(userData);\n      }\n\n      var errorMessage = this.getErrorMessage(prevProps, prevState);\n      var successMessage = this.getSuccessMessage(prevProps, prevState);\n\n      if (errorMessage) {\n        toast.error(React.createElement(ToastComponent.errorToast, {\n          text: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else if (successMessage) {\n        toast.success(React.createElement(ToastComponent.successToast, {\n          text: successMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stompClient.disconnect();\n      this._isMounted = false;\n    }\n  }, {\n    key: \"getSuccessMessage\",\n    value: function getSuccessMessage(prevProps, prevState) {\n      if (!this.props.fetchAllChatFriends.hasError && this.props.fetchAllChatFriends.message && this.props.fetchAllChatFriends !== prevProps.fetchAllChatFriends) {\n        return this.props.fetchAllChatFriends.message;\n      } else if (!this.props.fetchAllMessages.hasError && this.props.fetchAllMessages.message && this.props.fetchAllMessages !== prevProps.fetchAllMessages) {\n        return this.props.fetchAllMessages.message;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage(prevProps, prevState) {\n      if (this.props.fetchAllChatFriends.hasError && prevProps.fetchAllChatFriends.error !== this.props.fetchAllChatFriends.error) {\n        return this.props.fetchAllChatFriends.message || 'Server Error';\n      } else if (this.props.fetchAllMessages.hasError && prevProps.fetchAllMessages.error !== this.props.fetchAllMessages.error) {\n        return this.props.fetchAllMessages.message || 'Server Error';\n      }\n\n      return null;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(payload) {\n      this.stompClient.send(\"/app/message\", {}, JSON.stringify(payload));\n      this.setState({\n        content: ''\n      });\n    }\n  }, {\n    key: \"onSubmitHandler\",\n    value: function onSubmitHandler(event) {\n      event.preventDefault();\n\n      if (!this.canBeSubmitted()) {\n        return;\n      }\n\n      var _this$state = this.state,\n          toUserId = _this$state.chatUserId,\n          content = _this$state.content;\n\n      if (this.state.clientConnected) {\n        this.sendMessage({\n          toUserId: toUserId,\n          content: content\n        });\n      } else {\n        toast.error(React.createElement(ToastComponent.errorToast, {\n          text: \"StompClient is disconnected\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  }, {\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"canBeSubmitted\",\n    value: function canBeSubmitted() {\n      var content = this.state.content;\n      var errors = this.validate(content);\n      var isDisabled = Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      return !isDisabled;\n    }\n  }, {\n    key: \"scrollToBottom\",\n    value: function scrollToBottom() {\n      var e = document.getElementById('chat-content');\n      e.scrollTop = e.scrollHeight - e.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"scrollTop\",\n    value: function scrollTop() {\n      var container = document.getElementById('chat-content');\n      container.scrollTop = 0;\n    }\n  }, {\n    key: \"scrollDown\",\n    value: function scrollDown() {\n      var container = document.getElementById('chat-content');\n      container.scrollTop = container.scrollHeight;\n    }\n  }, {\n    key: \"changeUserOnlineStatus\",\n    value: function changeUserOnlineStatus(webSocketMessage) {\n      var id = webSocketMessage.userId,\n          online = webSocketMessage.online;\n      this.props.updateUserStatus({\n        id: id,\n        online: online\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (!this.state.clientConnected) {\n        console.log('Connecting...');\n        return React.createElement(\"h1\", {\n          className: \"text-center pt-5 mt-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          },\n          __self: this\n        }, \"Connecting...\");\n      }\n\n      var content = this.state.content;\n      var errors = this.validate(content);\n      var isEnabled = !Object.keys(errors).some(function (x) {\n        return errors[x];\n      });\n      var displayButon = isEnabled ? '' : 'hidden';\n      var loggedInUserFirstName = userService.getFirstName();\n      var userBoxHeight = this.state.userBoxHeight;\n      var chatBoxHeight = this.state.chatBoxHeight;\n      var chatBoxDisplay = this.state.chatBoxDisplay;\n      var _this$state2 = this.state,\n          chatUserProfilePicUrl = _this$state2.chatUserProfilePicUrl,\n          chatUserNameFormatted = _this$state2.chatUserNameFormatted;\n      var imageClassUserPick = userService.getImageSize(chatUserProfilePicUrl);\n      var firstNameFormatted = userService.formatUsername(loggedInUserFirstName);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"messagebox-container \".concat(userBoxHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"messagebox-header\",\n        onClick: this.changeHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"messagebox-chat-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-location-arrow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      })), React.createElement(\"h4\", {\n        className: \"chat-title\",\n        style: {\n          color: ' #333'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, \"Chat \\u2022 \", this.getOnlineUserCount())), React.createElement(\"div\", {\n        className: \"messagebox-friendsChatArr-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, this.props.friendsChatArr.map(function (friend) {\n        return React.createElement(FriendChatBox, Object.assign({\n          key: friend.id,\n          showUserChatBox: _this3.showUserChatBox\n        }, friend, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357\n          },\n          __self: this\n        }));\n      }))), React.createElement(\"section\", {\n        className: \"chat-container \".concat(chatBoxHeight, \" \").concat(chatBoxDisplay),\n        id: \"chat-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-friend-container\",\n        onClick: this.changeChatBoxHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-friend-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: imageClassUserPick,\n        src: chatUserProfilePicUrl,\n        alt: \"bender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"chat-username-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"chat-username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, chatUserNameFormatted))), React.createElement(\"div\", {\n        className: \"close-button-container\",\n        onClick: this.closeUserChatBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"btn chat-uiButtonGroup chat-fbPhotoCurationControl  chat-delete-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-times\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"content-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-content\",\n        id: \"chat-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, this.props.allMessagesArr.map(function (message) {\n        return React.createElement(FriendMessage, Object.assign({\n          key: message.id\n        }, message, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383\n          },\n          __self: this\n        }));\n      })), React.createElement(\"div\", {\n        className: \"chat-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-input-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"chat-area-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.onSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"\",\n        id: \"chat-textarea-form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(TextareaAutosize, {\n        name: \"content\",\n        id: \"content\",\n        className: \"chat-textarea\",\n        value: this.state.content,\n        onChange: this.onChangeHandler,\n        onBlur: this.handleBlur('content'),\n        \"aria-describedby\": \"contentHelp\",\n        placeholder: \"Type your message, \".concat(firstNameFormatted, \"?\"),\n        maxRows: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        disabled: !isEnabled,\n        style: {\n          'visibility': \"\".concat(displayButon)\n        },\n        type: \"submit\",\n        className: \"btn fas fa-location-arrow App-button-primary send-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      })))))))));\n    }\n  }]);\n\n  return MessageBox;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    friendsChatArr: state.fetchAllChatFriends.friendsChatArr,\n    fetchAllChatFriends: state.fetchAllChatFriends,\n    allMessagesArr: state.fetchAllMessages.allMessagesArr,\n    fetchAllMessages: state.fetchAllMessages,\n    triggerMessageLoad: state.triggerMessageLoad\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadAllChatFriends: function loadAllChatFriends(userId) {\n      dispatch(fetchAllChatFriendsAction(userId));\n    },\n    fetchAllMessages: function fetchAllMessages(chatUserId) {\n      dispatch(fetchAllMessagesAction(chatUserId));\n    },\n    updateUserStatus: function updateUserStatus(userData) {\n      dispatch(updateUserStatusAction(userData));\n    },\n    addMessage: function addMessage(messageBody) {\n      dispatch(addMessageAction(messageBody));\n    },\n    loadAllUnreadMessages: function loadAllUnreadMessages() {\n      dispatch(fetchAllUnreadMessagesAction());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox);","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\components\\home\\MessageBox.js"],"names":["React","Component","Fragment","userService","toast","ToastComponent","TextareaAutosize","FriendChatBox","FriendMessage","connect","fetchAllChatFriendsAction","updateUserStatusAction","fetchAllMessagesAction","addMessageAction","fetchAllUnreadMessagesAction","Stomp","SockJS","MessageBox","props","initializeWebSocketConnection","ws","serverUrl","stompClient","over","headers","getAuthHeader","frame","_isMounted","setState","clientConnected","subscribe","message","body","messageBody","JSON","parse","fromUserId","state","chatUserId","getUserId","addMessage","formattedUserNames","formatUsername","fromUserFirstName","fromUserLastName","info","position","POSITION","TOP_RIGHT","loadAllUnreadMessages","parsedBody","changeUserOnlineStatus","error","token","localStorage","getItem","length","getAllMessages","fetchAllMessages","loadAllChatFriends","userId","handleBlur","field","event","touched","validate","content","changeHeight","userBoxHeight","changeChatBoxHeight","chatBoxHeight","changeChatBoxDisplay","chatBoxDisplay","showUserChatBox","data","id","firstName","lastName","profilePicUrl","chatUserNameFormatted","chatUserFirstName","chatUserLastName","chatUserProfilePicUrl","shouldScrollDown","closeUserChatBox","getOnlineUserCount","usersCount","friendsChatArr","filter","user","online","loggedInUserId","friendsArrLength","getBaseUrl","bind","onChangeHandler","onSubmitHandler","prevProps","prevState","allMessagesArr","scrollDown","scrollTop","triggerMessageLoad","userData","errorMessage","getErrorMessage","successMessage","getSuccessMessage","success","disconnect","fetchAllChatFriends","hasError","payload","send","stringify","preventDefault","canBeSubmitted","toUserId","sendMessage","target","name","value","errors","isDisabled","Object","keys","some","x","e","document","getElementById","scrollHeight","getBoundingClientRect","height","container","webSocketMessage","updateUserStatus","console","log","isEnabled","displayButon","loggedInUserFirstName","getFirstName","imageClassUserPick","getImageSize","firstNameFormatted","color","map","friend","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport TextareaAutosize from 'react-autosize-textarea';\nimport FriendChatBox from './FriendChatBox';\nimport FriendMessage from './FriendMessage';\nimport '../user/css/UserAllPage.css';\nimport './css/MessageBox.css';\nimport { connect } from 'react-redux';\nimport { fetchAllChatFriendsAction, updateUserStatusAction } from '../../store/actions/userActions';\nimport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction } from '../../store/actions/messageActions';\n\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\nclass MessageBox extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            loggedInUserId: '',\n            chatUserId: '',\n            chatUserFirstName: '',\n            chatUserLastName: '',\n            chatUserNameFormatted: '',\n            chatUserProfilePicUrl: '',\n            userBoxHeight: 'toggle',\n            chatBoxHeight: '',\n            chatBoxDisplay: 'display-none',\n            content: '',\n            shouldScrollDown: false,\n            friendsArrLength: 0,\n            clientConnected: false,\n            touched: {\n                content: false,\n            }\n        };\n\n        this._isMounted = false;\n\n        this.serverUrl = userService.getBaseUrl() + '/socket'\n        this.stompClient = null;\n\n        this.handleBlur = this.handleBlur.bind(this);\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\n        this.showUserChatBox = this.showUserChatBox.bind(this);\n        this.changeChatBoxDisplay = this.changeChatBoxDisplay.bind(this);\n        this.getAllMessages = this.getAllMessages.bind(this);\n        this.loadAllChatFriends = this.loadAllChatFriends.bind(this);\n    }\n\n    componentDidMount() {\n        const userId = userService.getUserId();\n        this.setState({\n            loggedInUserId: userId,\n        });\n\n        this.initializeWebSocketConnection();\n        this.loadAllChatFriends();\n\n        this._isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.allMessagesArr !== prevProps.allMessagesArr) {\n            this.setState({\n                content: '',\n            }, () => {\n                if (this.state.shouldScrollDown) {\n                    this.scrollDown();\n                } else {\n                    this.setState({ shouldScrollDown: true }, this.scrollTop())\n                }\n            });\n        }\n\n        if (this.props.friendsChatArr.length !== prevProps.friendsChatArr.length) {\n            this.setState({\n                chatBoxDisplay: 'display-none'\n            })\n        }\n\n        if (this.props.triggerMessageLoad !== prevProps.triggerMessageLoad) {\n            const userData = this.props.triggerMessageLoad;\n            this.showUserChatBox(userData)\n        }\n\n        const errorMessage = this.getErrorMessage(prevProps, prevState);\n        const successMessage = this.getSuccessMessage(prevProps, prevState)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        this.stompClient.disconnect();\n        this._isMounted = false;\n    }\n\n    getSuccessMessage(prevProps, prevState) {\n        if (!this.props.fetchAllChatFriends.hasError && this.props.fetchAllChatFriends.message && this.props.fetchAllChatFriends !== prevProps.fetchAllChatFriends) {\n            return this.props.fetchAllChatFriends.message;\n        }\n        else if (!this.props.fetchAllMessages.hasError && this.props.fetchAllMessages.message && this.props.fetchAllMessages !== prevProps.fetchAllMessages) {\n            return this.props.fetchAllMessages.message;\n        }\n        return null;\n    }\n\n    getErrorMessage(prevProps, prevState) {\n        if (this.props.fetchAllChatFriends.hasError && prevProps.fetchAllChatFriends.error !== this.props.fetchAllChatFriends.error) {\n            return this.props.fetchAllChatFriends.message || 'Server Error';\n        }\n        else if (this.props.fetchAllMessages.hasError && prevProps.fetchAllMessages.error !== this.props.fetchAllMessages.error) {\n            return this.props.fetchAllMessages.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    initializeWebSocketConnection = () => {\n        const ws = new SockJS(this.serverUrl);\n        this.stompClient = Stomp.over(ws);\n        const headers = this.getAuthHeader();\n\n        this.stompClient.connect(headers, (frame) => {\n            if (this._isMounted) {\n                this.setState({ clientConnected: true });\n                this.stompClient.subscribe(\"/user/queue/position-update\", (message) => {\n                    if (message.body) {\n                        const messageBody = JSON.parse(message.body);\n                        if (this._isMounted && (messageBody.fromUserId === this.state.chatUserId || messageBody.fromUserId === userService.getUserId())) {\n                            this.props.addMessage(messageBody)\n                        }\n\n                        if (messageBody.fromUserId !== userService.getUserId()) {\n                            const formattedUserNames = userService.formatUsername(messageBody.fromUserFirstName, messageBody.fromUserLastName)\n\n                            toast.info(<ToastComponent.infoToast text={`You have a new message from ${formattedUserNames}!`} />, {\n                                position: toast.POSITION.TOP_RIGHT\n                            });\n\n                            this.props.loadAllUnreadMessages();\n                        }\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/login\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n\n                this.stompClient.subscribe(\"/chat/logout\", (message) => {\n                    if (message.body) {\n                        const parsedBody = JSON.parse(message.body);\n                        this.changeUserOnlineStatus(parsedBody);\n                    }\n                });\n            }\n        }, () => {\n            toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Refresh the page to reconnect.`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n\n            //// Callback for automatically reconnecting to the server\n            // setTimeout(() => {\n            //     toast.error(<ToastComponent.errorToast text={`Lost connection to ${this.serverUrl}. Trying to reconnect.`} />, {\n            //         position: toast.POSITION.TOP_RIGHT\n            //     });\n            //     this.initializeWebSocketConnection();\n            // }, 10000);\n        });\n    }\n\n    sendMessage(payload) {\n        this.stompClient.send(\"/app/message\", {}, JSON.stringify(payload));\n        this.setState({ content: '' })\n    }\n\n    getAuthHeader = () => {\n        const token = localStorage.getItem(\"token\");\n        return (token && token.length)\n            ? { 'Authorization': `Bearer ${token}` }\n            : {}\n    }\n\n    getAllMessages = (chatUserId) => {\n        this.props.fetchAllMessages(chatUserId);\n    }\n\n    loadAllChatFriends = () => {\n        const userId = userService.getUserId();\n        this.props.loadAllChatFriends(userId);\n    }\n\n    onSubmitHandler(event) {\n        event.preventDefault();\n\n        if (!this.canBeSubmitted()) {\n            return;\n        }\n\n        const { chatUserId: toUserId, content } = this.state;\n\n        if (this.state.clientConnected) {\n            this.sendMessage({ toUserId, content });\n        } else {\n            toast.error(<ToastComponent.errorToast text={`StompClient is disconnected`} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    onChangeHandler(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleBlur = (field) => (event) => {\n        this.setState({\n            touched: { ...this.state.touched, [field]: true }\n        });\n    }\n\n    canBeSubmitted() {\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isDisabled = Object.keys(errors).some(x => errors[x])\n        return !isDisabled;\n    }\n\n    validate = (content) => {\n        return {\n            content: content.length === 0,\n        }\n    }\n\n    changeHeight = () => {\n        const userBoxHeight = this.state.userBoxHeight;\n        if (userBoxHeight === '') {\n            this.setState({ userBoxHeight: 'toggle' })\n        } else {\n            this.setState({ userBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxHeight = () => {\n        const chatBoxHeight = this.state.chatBoxHeight;\n        if (chatBoxHeight === '') {\n            this.setState({ chatBoxHeight: 'toggle-chat-container' })\n        } else {\n            this.setState({ chatBoxHeight: '' })\n        }\n    }\n\n    changeChatBoxDisplay = () => {\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n        if (chatBoxDisplay === '') {\n            this.setState({ chatBoxDisplay: 'display-none' })\n        } else {\n            this.setState({ chatBoxDisplay: '' })\n        }\n    }\n\n    showUserChatBox = (data, event) => {\n        const { id, firstName, lastName, profilePicUrl } = data\n        let chatUserNameFormatted = userService.formatUsername(firstName, lastName, 18)\n        this.setState({\n            chatUserId: id,\n            chatUserFirstName: firstName,\n            chatUserLastName: lastName,\n            chatUserNameFormatted,\n            chatUserProfilePicUrl: profilePicUrl,\n            shouldScrollDown: true,\n            chatBoxDisplay: '',\n            chatBoxHeight: '',\n            content: '',\n        }, () => {\n            this.getAllMessages(id);\n        })\n    }\n\n    closeUserChatBox = () => {\n        this.setState({ chatBoxDisplay: 'display-none' })\n    }\n\n    scrollToBottom() {\n        const e = document.getElementById('chat-content');\n        e.scrollTop = e.scrollHeight - e.getBoundingClientRect().height;\n    }\n\n    scrollTop() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = 0;\n    }\n\n    scrollDown() {\n        const container = document.getElementById('chat-content');\n        container.scrollTop = container.scrollHeight\n    }\n\n    getOnlineUserCount = () => {\n        let usersCount = this.props.friendsChatArr.filter(user => { return user.online === true });\n        return usersCount.length;\n    }\n\n    changeUserOnlineStatus(webSocketMessage) {\n        const { userId: id, online } = webSocketMessage;\n        this.props.updateUserStatus({ id, online });\n    }\n\n    render() {\n        if (!this.state.clientConnected) {\n            console.log('Connecting...')\n            return <h1 className=\"text-center pt-5 mt-5\">Connecting...</h1>\n        }\n\n        const { content } = this.state;\n        const errors = this.validate(content);\n        const isEnabled = !Object.keys(errors).some(x => errors[x]);\n        const displayButon = isEnabled ? '' : 'hidden';\n        const loggedInUserFirstName = userService.getFirstName();\n        const userBoxHeight = this.state.userBoxHeight;\n        const chatBoxHeight = this.state.chatBoxHeight;\n        const chatBoxDisplay = this.state.chatBoxDisplay;\n\n        const { chatUserProfilePicUrl, chatUserNameFormatted } = this.state;\n        const imageClassUserPick = userService.getImageSize(chatUserProfilePicUrl);\n        const firstNameFormatted = userService.formatUsername(loggedInUserFirstName);\n\n        return (\n            <Fragment>\n                <section className={`messagebox-container ${userBoxHeight}`} >\n                    <div className=\"messagebox-header\" onClick={this.changeHeight}>\n                        <div className=\"messagebox-chat-icon\">\n                            <i className=\"fas fa-location-arrow\"></i>\n                        </div>\n                        <h4 className=\"chat-title\" style={{ color: ' #333' }}>\n                            Chat &bull; {this.getOnlineUserCount()}\n                        </h4>\n                    </div>\n                    <div className=\"messagebox-friendsChatArr-wrapper\">\n\n                        {this.props.friendsChatArr.map((friend) =>\n                            <FriendChatBox\n                                key={friend.id}\n                                showUserChatBox={this.showUserChatBox}\n                                {...friend}\n                            />\n                        )}\n                    </div>\n                </section>\n                <section className={`chat-container ${chatBoxHeight} ${chatBoxDisplay}`} id=\"chat-container\">\n                    <div className=\"chat-friend-container\" onClick={this.changeChatBoxHeight}>\n                        <div className=\"chat-friend-image\">\n                            <img className={imageClassUserPick} src={chatUserProfilePicUrl} alt=\"bender\" />\n                        </div>\n                        <div className=\"chat-username-container\" >\n                            <p className=\"chat-username\">{chatUserNameFormatted}</p>\n                        </div>\n                    </div>\n\n                    <div className=\"close-button-container\" onClick={this.closeUserChatBox}>\n                        <div className=\"btn chat-uiButtonGroup chat-fbPhotoCurationControl  chat-delete-button\" ><i className=\"fas fa-times\"></i></div>\n                    </div>\n\n                    <div className=\"content-wrapper\">\n\n                        <div className=\"chat-content\" id=\"chat-content\">\n                            {this.props.allMessagesArr.map((message) =>\n                                <FriendMessage\n                                    key={message.id}\n                                    {...message}\n                                />\n                            )}\n                        </div>\n                        <div className=\"chat-footer\">\n                            <div className=\"chat-input-group\">\n                                <div className=\"chat-area-container\">\n                                    <form onSubmit={this.onSubmitHandler}>\n                                        <div className=\"\" id=\"chat-textarea-form-group\">\n                                            <TextareaAutosize\n                                                name=\"content\"\n                                                id=\"content\"\n                                                className=\"chat-textarea\"\n                                                value={this.state.content}\n                                                onChange={this.onChangeHandler}\n                                                onBlur={this.handleBlur('content')}\n                                                aria-describedby=\"contentHelp\"\n                                                placeholder={`Type your message, ${firstNameFormatted}?`}\n                                                maxRows={6}\n                                            >\n                                            </TextareaAutosize>\n                                        </div>\n\n                                        <div className=\"text-center\">\n                                            <button disabled={!isEnabled} style={{ 'visibility': `${displayButon}` }} type=\"submit\" className=\"btn fas fa-location-arrow App-button-primary send-btn\"></button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </section>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        friendsChatArr: state.fetchAllChatFriends.friendsChatArr,\n        fetchAllChatFriends: state.fetchAllChatFriends,\n\n        allMessagesArr: state.fetchAllMessages.allMessagesArr,\n        fetchAllMessages: state.fetchAllMessages,\n\n        triggerMessageLoad: state.triggerMessageLoad,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadAllChatFriends: (userId) => { dispatch(fetchAllChatFriendsAction(userId)) },\n        fetchAllMessages: (chatUserId) => { dispatch(fetchAllMessagesAction(chatUserId)) },\n        updateUserStatus: (userData) => { dispatch(updateUserStatusAction(userData)) },\n        addMessage: (messageBody) => { dispatch(addMessageAction(messageBody)) },\n        loadAllUnreadMessages: () => { dispatch(fetchAllUnreadMessagesAction()) },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageBox);"]},"metadata":{},"sourceType":"module"}