{"ast":null,"code":"import _defineProperty from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _taggedTemplateLiteral from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\src\\\\components\\\\user\\\\UserLogsPage.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        display: block;\\n        margin: 0 auto;\\n        border-color: red;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, Fragment } from 'react';\nimport LogsRow from './LogsRow';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport './css/UserLogsPage.css';\nimport { css } from '@emotion/core';\nimport { CircleLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\nimport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction } from '../../store/actions/logsActions';\nvar override = css(_templateObject());\n\nvar UserLogsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserLogsPage, _Component);\n\n  function UserLogsPage(props) {\n    var _this;\n\n    _classCallCheck(this, UserLogsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserLogsPage).call(this, props));\n\n    _this.loadAllLogs = function () {\n      _this.setState({\n        selected: '',\n        search: ''\n      }, function () {\n        return _this.props.loadAllLogs();\n      });\n    };\n\n    _this.searchLogs = function () {\n      var search = _this.state.search;\n\n      if (!search) {\n        _this.props.loadAllLogs();\n      } else {\n        _this.setState({\n          selected: search\n        }, function () {\n          return _this.props.loadLogsByUserName(search);\n        });\n      }\n    };\n\n    _this.clearAllLogs = function () {\n      _this.props.deleteAllLogs();\n    };\n\n    _this.clearSelectedLogs = function () {\n      var selected = _this.state.selected;\n\n      if (!selected) {\n        return;\n      }\n\n      _this.props.deleteLogsByUserName(selected);\n    };\n\n    _this.state = {\n      search: '',\n      selected: ''\n    };\n    _this.onChangeHandler = _this.onChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadAllLogs = _this.loadAllLogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.searchLogs = _this.searchLogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearAllLogs = _this.clearAllLogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearSelectedLogs = _this.clearSelectedLogs.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UserLogsPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadAllLogs();\n      var loggedInUserId = userService.getUserId();\n\n      if (loggedInUserId !== this.props.timeLineUserData.id) {\n        this.props.changeTimeLineUser(loggedInUserId);\n        this.props.changeAllPictures(loggedInUserId);\n        this.props.changeAllFriends(loggedInUserId);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var errorMessage = this.getErrorMessage(prevProps);\n      var successMessage = this.getSuccessMessage(prevProps);\n\n      if (errorMessage) {\n        toast.error(React.createElement(ToastComponent.errorToast, {\n          text: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else if (successMessage) {\n        console.log('this.state: ', this.state);\n        toast.success(React.createElement(ToastComponent.successToast, {\n          text: successMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  }, {\n    key: \"getSuccessMessage\",\n    value: function getSuccessMessage(prevProps) {\n      if (!this.state.search && !this.props.fetchAllLogs.hasError && this.props.fetchAllLogs.message && this.props.fetchAllLogs !== prevProps.fetchAllLogs) {\n        return this.props.fetchAllLogs.message;\n      } else if (!this.props.findLogsByUserName.hasError && this.props.findLogsByUserName.message && this.props.findLogsByUserName !== prevProps.findLogsByUserName) {\n        return this.props.findLogsByUserName.message;\n      } else if (!this.props.clearLogsByUserName.hasError && this.props.clearLogsByUserName.message && this.props.clearLogsByUserName !== prevProps.clearLogsByUserName) {\n        this.setState({\n          selected: '',\n          search: ''\n        });\n        return this.props.clearLogsByUserName.message;\n      } else if (!this.props.clearAllLogs.hasError && this.props.clearAllLogs.message && this.props.clearAllLogs !== prevProps.clearAllLogs) {\n        this.setState({\n          selected: '',\n          search: ''\n        });\n        return this.props.clearAllLogs.message;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage(prevProps) {\n      if (this.props.fetchAllLogs.hasError && prevProps.fetchAllLogs.error !== this.props.fetchAllLogs.error) {\n        return this.props.fetchAllLogs.message || 'Server Error';\n      } else if (this.props.findLogsByUserName.hasError && prevProps.findLogsByUserName.error !== this.props.findLogsByUserName.error) {\n        this.setState({\n          selected: ''\n        });\n        return this.props.findLogsByUserName.message || 'Server Error';\n      } else if (this.props.clearLogsByUserName.hasError && prevProps.clearLogsByUserName.error !== this.props.clearLogsByUserName.error) {\n        return this.props.clearLogsByUserName.message || 'Server Error';\n      } else if (this.props.clearAllLogs.hasError && prevProps.clearAllLogs.error !== this.props.clearAllLogs.error) {\n        return this.props.clearAllLogs.message || 'Server Error';\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onChangeHandler\",\n    value: function onChangeHandler(event) {\n      this.setState(_defineProperty({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var loading = this.props.fetchAllLogs.loading || this.props.findLogsByUserName.loading || this.props.clearLogsByUserName.loading || this.props.clearAllLogs.loading;\n\n      if (loading) {// return <h1 className=\"text-center pt-5 mt-5\">Loading...</h1>\n      }\n\n      var selected = this.state.selected;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"article\", {\n        className: \"main-article-shared-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"logs-content-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container col-md-11 text-center mx-auto mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-center font-weight-bold mt-4\",\n        style: {\n          'margin': '1rem auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Server Logs History\"), React.createElement(\"div\", {\n        className: \"hr-styles\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-md-4 mx-auto mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"form-control-label font-weight-bold\",\n        htmlFor: \"search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Enter Username:\"), React.createElement(\"input\", {\n        className: \"form-control mx-auto\",\n        type: \"search\",\n        placeholder: \"Search\",\n        \"aria-label\": \"Search\",\n        name: \"search\",\n        id: \"search\",\n        value: this.state.search,\n        onChange: this.onChangeHandler,\n        style: {\n          background: '#EEE'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-5 d-flex justify-content-center mx-auto mb-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn update-info m-1\",\n        onClick: this.searchLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"SEARCH\")), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn update-info m-1\",\n        onClick: this.loadAllLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"ALL LOGS\")), userService.isRoot() && this.props.logsArr.length > 0 && React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn update-info m-1\",\n        onClick: this.clearAllLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"CLEAR ALL\")), userService.isRoot() && selected && React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btn update-info m-1\",\n        onClick: this.clearSelectedLogs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"CLEAR SELECTED\"))), this.props.logsArr.length > 0 ? React.createElement(\"table\", {\n        className: \"table table-hover mt-3 w-80 mx-auto text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        className: \"row \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"col-md-1 \",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"#\"), React.createElement(\"th\", {\n        className: \"col-md-2\",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Username\"), React.createElement(\"th\", {\n        className: \"col-md-2 \",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Method\"), React.createElement(\"th\", {\n        className: \"col-md-2 \",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Action\"), React.createElement(\"th\", {\n        className: \"col-md-2\",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Modified Table\"), React.createElement(\"th\", {\n        className: \"col-md-3 \",\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Time\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, loading ? React.createElement(CircleLoader, {\n        css: override,\n        sizeUnit: \"px\",\n        size: 150,\n        color: '#61dafb',\n        loading: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }) : this.props.logsArr.map(function (log, i) {\n        return React.createElement(LogsRow, Object.assign({\n          key: log.id,\n          index: i + 1\n        }, _this2.props, log, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }));\n      }))) : loading ? React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(CircleLoader, {\n        css: override,\n        sizeUnit: \"px\",\n        size: 150,\n        color: '#61dafb',\n        loading: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })) : React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"hr-styles\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        className: \"mt-5 mb-5 mx-auto display-5 text-center App-secondary-color\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Logs history is empty. \"), React.createElement(\"div\", {\n        className: \"hr-styles\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return UserLogsPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    timeLineUserData: state.timeLineUserData,\n    loggedInUserData: state.loggedInUserData,\n    fetchAllLogs: state.fetchAllLogs,\n    logsArr: state.fetchAllLogs.logsArr,\n    findLogsByUserName: state.findLogsByUserName,\n    clearLogsByUserName: state.clearLogsByUserName,\n    clearAllLogs: state.clearAllLogs\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeTimeLineUser: function changeTimeLineUser(userId) {\n      dispatch(changeCurrentTimeLineUserAction(userId));\n    },\n    changeAllFriends: function changeAllFriends(userId) {\n      dispatch(changeAllFriendsAction(userId));\n    },\n    changeAllPictures: function changeAllPictures(userId) {\n      dispatch(changeAllPicturesAction(userId));\n    },\n    loadAllLogs: function loadAllLogs() {\n      dispatch(fetchAllLogsAction());\n    },\n    loadLogsByUserName: function loadLogsByUserName(search) {\n      dispatch(findLogsByUserNameAction(search));\n    },\n    deleteLogsByUserName: function deleteLogsByUserName(selected) {\n      dispatch(clearLogsByUserNameAction(selected));\n    },\n    deleteAllLogs: function deleteAllLogs() {\n      dispatch(clearAllLogsAction());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserLogsPage);","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\components\\user\\UserLogsPage.js"],"names":["React","Component","Fragment","LogsRow","userService","toast","ToastComponent","css","CircleLoader","connect","changeCurrentTimeLineUserAction","changeAllFriendsAction","changeAllPicturesAction","fetchAllLogsAction","findLogsByUserNameAction","clearLogsByUserNameAction","clearAllLogsAction","override","UserLogsPage","props","loadAllLogs","setState","selected","search","searchLogs","state","loadLogsByUserName","clearAllLogs","deleteAllLogs","clearSelectedLogs","deleteLogsByUserName","onChangeHandler","bind","loggedInUserId","getUserId","timeLineUserData","id","changeTimeLineUser","changeAllPictures","changeAllFriends","prevProps","prevState","errorMessage","getErrorMessage","successMessage","getSuccessMessage","error","position","POSITION","TOP_RIGHT","console","log","success","fetchAllLogs","hasError","message","findLogsByUserName","clearLogsByUserName","event","target","name","value","loading","background","isRoot","logsArr","length","map","i","mapStateToProps","loggedInUserData","mapDispatchToProps","dispatch","userId"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport LogsRow from './LogsRow';\nimport { userService } from '../../infrastructure';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport './css/UserLogsPage.css';\nimport { css } from '@emotion/core';\nimport { CircleLoader } from 'react-spinners';\n\nimport { connect } from 'react-redux';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\nimport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction } from '../../store/actions/logsActions';\n\nconst override = css`\n        display: block;\n        margin: 0 auto;\n        border-color: red;\n`;\n\nclass UserLogsPage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: '',\n            selected: '',\n        };\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.loadAllLogs = this.loadAllLogs.bind(this);\n        this.searchLogs = this.searchLogs.bind(this);\n        this.clearAllLogs = this.clearAllLogs.bind(this);\n        this.clearSelectedLogs = this.clearSelectedLogs.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadAllLogs();\n\n        const loggedInUserId = userService.getUserId();\n        if (loggedInUserId !== this.props.timeLineUserData.id) {\n            this.props.changeTimeLineUser(loggedInUserId);\n            this.props.changeAllPictures(loggedInUserId);\n            this.props.changeAllFriends(loggedInUserId);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const errorMessage = this.getErrorMessage(prevProps);\n        const successMessage = this.getSuccessMessage(prevProps)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            console.log('this.state: ', this.state)\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    getSuccessMessage(prevProps) {\n        if (!this.state.search && !this.props.fetchAllLogs.hasError && this.props.fetchAllLogs.message && this.props.fetchAllLogs !== prevProps.fetchAllLogs) {\n            return this.props.fetchAllLogs.message;\n        } else if (!this.props.findLogsByUserName.hasError && this.props.findLogsByUserName.message && this.props.findLogsByUserName !== prevProps.findLogsByUserName) {\n            return this.props.findLogsByUserName.message;\n        } else if (!this.props.clearLogsByUserName.hasError && this.props.clearLogsByUserName.message && this.props.clearLogsByUserName !== prevProps.clearLogsByUserName) {\n            this.setState({\n                selected: '',\n                search: '',\n            })\n            return this.props.clearLogsByUserName.message;\n        } else if (!this.props.clearAllLogs.hasError && this.props.clearAllLogs.message && this.props.clearAllLogs !== prevProps.clearAllLogs) {\n            this.setState({\n                selected: '',\n                search: '',\n            })\n\n            return this.props.clearAllLogs.message;\n        }\n\n        return null;\n    }\n\n    getErrorMessage(prevProps) {\n        if (this.props.fetchAllLogs.hasError && prevProps.fetchAllLogs.error !== this.props.fetchAllLogs.error) {\n            return this.props.fetchAllLogs.message || 'Server Error';\n        }\n        else if (this.props.findLogsByUserName.hasError && prevProps.findLogsByUserName.error !== this.props.findLogsByUserName.error) {\n            this.setState({\n                selected: '',\n            })\n            return this.props.findLogsByUserName.message || 'Server Error';\n        } else if (this.props.clearLogsByUserName.hasError && prevProps.clearLogsByUserName.error !== this.props.clearLogsByUserName.error) {\n            return this.props.clearLogsByUserName.message || 'Server Error';\n        } else if (this.props.clearAllLogs.hasError && prevProps.clearAllLogs.error !== this.props.clearAllLogs.error) {\n            return this.props.clearAllLogs.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    onChangeHandler(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    loadAllLogs = () => {\n        this.setState({\n            selected: '',\n            search: '',\n        }, () => this.props.loadAllLogs())\n    }\n\n    searchLogs = () => {\n        const search = this.state.search;\n        if (!search) {\n            this.props.loadAllLogs();\n        } else {\n            this.setState({\n                selected: search,\n            }, () => this.props.loadLogsByUserName(search))\n        }\n    }\n\n    clearAllLogs = () => {\n        this.props.deleteAllLogs();\n    }\n\n    clearSelectedLogs = () => {\n        const selected = this.state.selected;\n        if (!selected) {\n            return;\n        }\n\n        this.props.deleteLogsByUserName(selected);\n    }\n\n    render() {\n        const loading = this.props.fetchAllLogs.loading || this.props.findLogsByUserName.loading\n            || this.props.clearLogsByUserName.loading || this.props.clearAllLogs.loading;\n\n        if (loading) {\n            // return <h1 className=\"text-center pt-5 mt-5\">Loading...</h1>\n        }\n\n        const selected = this.state.selected;\n\n        return (\n            <Fragment >\n                <article className=\"main-article-shared-content\">\n                    <section className=\"logs-content-section\">\n                        <div className=\"container col-md-11 text-center mx-auto mb-4\">\n                            <h1 className=\"text-center font-weight-bold mt-4\" style={{ 'margin': '1rem auto' }}>Server Logs History</h1>\n                            <div className=\"hr-styles\"></div>\n\n                            <div className=\"col-md-4 mx-auto mb-3\" >\n                                <label className=\"form-control-label font-weight-bold\" htmlFor=\"search\">Enter Username:</label>\n                                <input\n                                    className=\"form-control mx-auto\"\n                                    type=\"search\"\n                                    placeholder=\"Search\"\n                                    aria-label=\"Search\"\n                                    name=\"search\"\n                                    id=\"search\"\n                                    value={this.state.search}\n                                    onChange={this.onChangeHandler}\n                                    style={{ background: '#EEE' }}\n                                />\n                            </div>\n\n                            <div className=\"col-md-5 d-flex justify-content-center mx-auto mb-5\" >\n                                <h5>\n                                    <button className=\"btn update-info m-1\" onClick={this.searchLogs} >SEARCH</button>\n                                </h5>\n\n                                <h5>\n                                    <button className=\"btn update-info m-1\" onClick={this.loadAllLogs} >ALL LOGS</button>\n                                </h5>\n                                {userService.isRoot() && this.props.logsArr.length > 0 &&\n                                    <h5>\n                                        <button className=\"btn update-info m-1\" onClick={this.clearAllLogs} >CLEAR ALL</button>\n                                    </h5>}\n\n                                {userService.isRoot() && selected &&\n                                    <h5>\n                                        <button className=\"btn update-info m-1\" onClick={this.clearSelectedLogs} >CLEAR SELECTED</button>\n                                    </h5>}\n                            </div>\n\n                            {this.props.logsArr.length > 0\n                                ?\n                                <table className=\"table table-hover mt-3 w-80 mx-auto text-center\">\n                                    <thead>\n                                        <tr className=\"row \" >\n                                            <th className=\"col-md-1 \" scope=\"col\">#</th>\n                                            <th className=\"col-md-2\" scope=\"col\">Username</th>\n                                            <th className=\"col-md-2 \" scope=\"col\">Method</th>\n\n                                            <th className=\"col-md-2 \" scope=\"col\">Action</th>\n                                            <th className=\"col-md-2\" scope=\"col\">Modified Table</th>\n\n                                            <th className=\"col-md-3 \" scope=\"col\">Time</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {loading\n                                            ?\n                                            <CircleLoader\n                                                css={override}\n                                                sizeUnit={\"px\"}\n                                                size={150}\n                                                color={'#61dafb'}\n                                                loading={true}\n                                            /> :\n\n                                            this.props.logsArr.map((log, i) => <LogsRow key={log.id} index={i + 1} {...this.props} {...log} />)}\n                                    </tbody>\n                                </table>\n                                :\n                                loading ?\n                                    <Fragment>\n                                        <CircleLoader\n                                            css={override}\n                                            sizeUnit={\"px\"}\n                                            size={150}\n                                            color={'#61dafb'}\n                                            loading={true}\n                                        />\n                                    </Fragment> :\n                                    <Fragment>\n                                        <div className=\"hr-styles\"></div>\n                                        <h3 className=\"mt-5 mb-5 mx-auto display-5 text-center App-secondary-color\">Logs history is empty. </h3>\n                                        <div className=\"hr-styles\"></div>\n                                    </Fragment>\n                            }\n                        </div>\n                    </section>\n                </article>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        timeLineUserData: state.timeLineUserData,\n        loggedInUserData: state.loggedInUserData,\n\n        fetchAllLogs: state.fetchAllLogs,\n        logsArr: state.fetchAllLogs.logsArr,\n\n        findLogsByUserName: state.findLogsByUserName,\n        clearLogsByUserName: state.clearLogsByUserName,\n        clearAllLogs: state.clearAllLogs,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeTimeLineUser: (userId) => { dispatch(changeCurrentTimeLineUserAction(userId)) },\n        changeAllFriends: (userId) => { dispatch(changeAllFriendsAction(userId)) },\n        changeAllPictures: (userId) => { dispatch(changeAllPicturesAction(userId)) },\n\n        loadAllLogs: () => { dispatch(fetchAllLogsAction()) },\n        loadLogsByUserName: (search) => { dispatch(findLogsByUserNameAction(search)) },\n        deleteLogsByUserName: (selected) => { dispatch(clearLogsByUserNameAction(selected)) },\n        deleteAllLogs: () => { dispatch(clearAllLogsAction()) },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserLogsPage);"]},"metadata":{},"sourceType":"module"}