{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE, FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES } from './actionTypes'; // fetchAllMessages\n\nvar fetchAllMessagesSuccess = function fetchAllMessagesSuccess(allMessages) {\n  return {\n    type: FETCH_ALLMESSAGES_SUCCESS,\n    payload: allMessages\n  };\n};\n\nvar fetchAllMessagesBegin = function fetchAllMessagesBegin() {\n  return {\n    type: FETCH_ALLMESSAGES_BEGIN\n  };\n};\n\nvar fetchAllMessagesError = function fetchAllMessagesError(error, message, status, path) {\n  return {\n    type: FETCH_ALLMESSAGES_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar fetchAllMessagesAction = function fetchAllMessagesAction(chatUserId) {\n  return function (dispatch) {\n    dispatch(fetchAllMessagesBegin());\n    return requester.get('/message/all/' + chatUserId, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(fetchAllMessagesError(error, message, status, path));\n      } else {\n        dispatch(fetchAllMessagesSuccess(response));\n        dispatch(fetchAllUnreadMessagesAction());\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(fetchAllMessagesError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\nvar addMessageAction = function addMessageAction(messageBody) {\n  return {\n    type: ADD_MESSAGE,\n    payload: messageBody\n  };\n}; // fetchAllUnreadMessages\n\n\nvar fetchAllUnreadMessagesSuccess = function fetchAllUnreadMessagesSuccess(allUnreadMessages) {\n  return {\n    type: FETCH_UNREADMESSAGES_SUCCESS,\n    payload: allUnreadMessages\n  };\n};\n\nvar fetchAllUnreadMessagesBegin = function fetchAllUnreadMessagesBegin() {\n  return {\n    type: FETCH_UNREADMESSAGES_BEGIN\n  };\n};\n\nvar fetchAllUnreadMessagesError = function fetchAllUnreadMessagesError(error, message, status, path) {\n  return {\n    type: FETCH_UNREADMESSAGES_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar fetchAllUnreadMessagesAction = function fetchAllUnreadMessagesAction() {\n  return function (dispatch) {\n    dispatch(fetchAllUnreadMessagesBegin());\n    return requester.get('/message/friend', function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(fetchAllUnreadMessagesError(error, message, status, path));\n      } else {\n        dispatch(fetchAllUnreadMessagesSuccess(response));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(fetchAllUnreadMessagesError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // LoadUserMessages and showUserChatBox\n\n\nvar triggerMessageLoadAction = function triggerMessageLoadAction(userData) {\n  return {\n    type: LOAD_USER_MESSAGES,\n    payload: userData\n  };\n};\n\nexport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction, triggerMessageLoadAction };","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\actions\\messageActions.js"],"names":["requester","FETCH_ALLMESSAGES_SUCCESS","FETCH_ALLMESSAGES_BEGIN","FETCH_ALLMESSAGES_ERROR","ADD_MESSAGE","FETCH_UNREADMESSAGES_SUCCESS","FETCH_UNREADMESSAGES_BEGIN","FETCH_UNREADMESSAGES_ERROR","LOAD_USER_MESSAGES","fetchAllMessagesSuccess","allMessages","type","payload","fetchAllMessagesBegin","fetchAllMessagesError","error","message","status","path","fetchAllMessagesAction","chatUserId","dispatch","get","response","fetchAllUnreadMessagesAction","catch","err","localStorage","clear","addMessageAction","messageBody","fetchAllUnreadMessagesSuccess","allUnreadMessages","fetchAllUnreadMessagesBegin","fetchAllUnreadMessagesError","triggerMessageLoadAction","userData"],"mappings":"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","sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE,\n    FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES,\n} from './actionTypes';\n\n// fetchAllMessages\nconst fetchAllMessagesSuccess = (allMessages) => {\n    return {\n        type: FETCH_ALLMESSAGES_SUCCESS,\n        payload: allMessages\n    }\n}\n\nconst fetchAllMessagesBegin = () => {\n    return {\n        type: FETCH_ALLMESSAGES_BEGIN,\n    }\n}\n\nconst fetchAllMessagesError = (error, message, status, path) => {\n    return {\n        type: FETCH_ALLMESSAGES_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllMessagesAction = (chatUserId) => {\n    return (dispatch) => {\n        dispatch(fetchAllMessagesBegin())\n        return requester.get('/message/all/' + chatUserId, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllMessagesError(error, message, status, path));\n            } else {\n                dispatch(fetchAllMessagesSuccess(response));\n                dispatch(fetchAllUnreadMessagesAction());\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllMessagesError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\nconst addMessageAction = (messageBody) => {\n    return {\n        type: ADD_MESSAGE,\n        payload: messageBody\n    }\n}\n\n// fetchAllUnreadMessages\nconst fetchAllUnreadMessagesSuccess = (allUnreadMessages) => {\n    return {\n        type: FETCH_UNREADMESSAGES_SUCCESS,\n        payload: allUnreadMessages\n    }\n}\n\nconst fetchAllUnreadMessagesBegin = () => {\n    return {\n        type: FETCH_UNREADMESSAGES_BEGIN,\n    }\n}\n\nconst fetchAllUnreadMessagesError = (error, message, status, path) => {\n    return {\n        type: FETCH_UNREADMESSAGES_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllUnreadMessagesAction = () => {\n    return (dispatch) => {\n        dispatch(fetchAllUnreadMessagesBegin())\n        return requester.get('/message/friend', (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllUnreadMessagesError(error, message, status, path));\n            } else {\n                dispatch(fetchAllUnreadMessagesSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllUnreadMessagesError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// LoadUserMessages and showUserChatBox\nconst triggerMessageLoadAction = (userData) => {\n    return {\n        type: LOAD_USER_MESSAGES,\n        payload: userData\n    }\n}\n\nexport { fetchAllMessagesAction, addMessageAction, fetchAllUnreadMessagesAction, triggerMessageLoadAction };"]},"metadata":{},"sourceType":"module"}