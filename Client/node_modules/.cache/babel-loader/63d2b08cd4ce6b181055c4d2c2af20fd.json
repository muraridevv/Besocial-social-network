{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR, ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR } from './actionTypes';\nimport { fetchAllPostsAction } from './postActions'; // createComment\n\nvar createCommentSuccess = function createCommentSuccess(response) {\n  return {\n    type: CREATE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\n\nvar createCommentBegin = function createCommentBegin() {\n  return {\n    type: CREATE_COMMENT_BEGIN\n  };\n};\n\nvar createCommentError = function createCommentError(error, message, status, path) {\n  return {\n    type: CREATE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar createCommentAction = function createCommentAction(postId, loggedInUserId, timelineUserId, content, imageUrl) {\n  var requestBody = {\n    postId: postId,\n    loggedInUserId: loggedInUserId,\n    timelineUserId: timelineUserId,\n    content: content,\n    imageUrl: imageUrl\n  };\n  return function (dispatch) {\n    dispatch(createCommentBegin());\n    return requester.post('/comment/create', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(createCommentError(error, message, status, path));\n      } else {\n        dispatch(createCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(createCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // removeComment\n\n\nvar removeCommentSuccess = function removeCommentSuccess(response) {\n  return {\n    type: REMOVE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\n\nvar removeCommentBegin = function removeCommentBegin() {\n  return {\n    type: REMOVE_COMMENT_BEGIN\n  };\n};\n\nvar removeCommentError = function removeCommentError(error, message, status, path) {\n  return {\n    type: REMOVE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar removeCommentAction = function removeCommentAction(loggedInUserId, commentToRemoveId, timelineUserId) {\n  var requestBody = {\n    loggedInUserId: loggedInUserId,\n    commentToRemoveId: commentToRemoveId\n  };\n  return function (dispatch) {\n    dispatch(removeCommentBegin());\n    return requester.post('/comment/remove', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(removeCommentError(error, message, status, path));\n      } else {\n        dispatch(removeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(removeCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // addLike\n\n\nvar addLikeCommentSuccess = function addLikeCommentSuccess(response) {\n  return {\n    type: ADDLIKE_COMMENT_SUCCESS,\n    payload: response\n  };\n};\n\nvar addLikeCommentBegin = function addLikeCommentBegin() {\n  return {\n    type: ADDLIKE_COMMENT_BEGIN\n  };\n};\n\nvar addLikeCommentError = function addLikeCommentError(error, message, status, path) {\n  return {\n    type: ADDLIKE_COMMENT_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar addLikeCommentAction = function addLikeCommentAction(loggedInUserId, commentId, timelineUserId) {\n  var requestBody = {\n    commentId: commentId,\n    loggedInUserId: loggedInUserId\n  };\n  return function (dispatch) {\n    dispatch(addLikeCommentBegin());\n    return requester.post('/like/comment', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(addLikeCommentError(error, message, status, path));\n      } else {\n        dispatch(addLikeCommentSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(addLikeCommentError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\nexport { createCommentAction, removeCommentAction, addLikeCommentAction };","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\actions\\commentActions.js"],"names":["requester","REMOVE_COMMENT_BEGIN","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","ADDLIKE_COMMENT_SUCCESS","ADDLIKE_COMMENT_BEGIN","ADDLIKE_COMMENT_ERROR","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_BEGIN","CREATE_COMMENT_ERROR","fetchAllPostsAction","createCommentSuccess","response","type","payload","createCommentBegin","createCommentError","error","message","status","path","createCommentAction","postId","loggedInUserId","timelineUserId","content","imageUrl","requestBody","dispatch","post","catch","err","localStorage","clear","removeCommentSuccess","removeCommentBegin","removeCommentError","removeCommentAction","commentToRemoveId","addLikeCommentSuccess","addLikeCommentBegin","addLikeCommentError","addLikeCommentAction","commentId"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SACIC,oBADJ,EAC0BC,sBAD1B,EACkDC,oBADlD,EAEIC,uBAFJ,EAE6BC,qBAF7B,EAEoDC,qBAFpD,EAGIC,sBAHJ,EAG4BC,oBAH5B,EAGkDC,oBAHlD,QAIO,eAJP;AAMA,SAASC,mBAAT,QAAoC,eAApC,C,CAEA;;AACA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD,EAAc;AACvC,SAAO;AACHC,IAAAA,IAAI,EAAEN,sBADH;AAEHO,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,SAAO;AACHF,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGH,CAJD;;AAMA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,EAAkC;AACzD,SAAO;AACHP,IAAAA,IAAI,EAAEJ,oBADH;AAEHQ,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH,CARD;;AAUA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAASC,cAAT,EAAyBC,cAAzB,EAAyCC,OAAzC,EAAkDC,QAAlD,EAA+D;AACvF,MAAMC,WAAW,GAAG;AAAEL,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,cAAc,EAAdA,cAAV;AAA0BC,IAAAA,cAAc,EAAdA,cAA1B;AAA0CC,IAAAA,OAAO,EAAPA,OAA1C;AAAmDC,IAAAA,QAAQ,EAARA;AAAnD,GAApB;AACA,SAAO,UAACE,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACb,kBAAkB,EAAnB,CAAR;AACA,WAAOf,SAAS,CAAC6B,IAAV,CAAe,iBAAf,EAAkCF,WAAlC,EAA+C,UAACf,QAAD,EAAc;AAChE,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBQ,QAAAA,QAAQ,CAACZ,kBAAkB,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAAnB,CAAR;AACH,OAHD,MAGO;AACHQ,QAAAA,QAAQ,CAACjB,oBAAoB,CAACC,QAAD,CAArB,CAAR;AACAgB,QAAAA,QAAQ,CAAClB,mBAAmB,CAACc,cAAD,CAApB,CAAR;AACH;AACJ,KARM,EAQJM,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACZ,MAAJ,KAAe,GAAf,IAAsBY,GAAG,CAACb,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFc,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACZ,kBAAkB,CAAC,EAAD,mBAAee,GAAG,CAACb,OAAnB,GAA8Ba,GAAG,CAACZ,MAAlC,EAA0C,EAA1C,CAAnB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH,CAnBD,C,CAqBA;;;AACA,IAAMe,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACtB,QAAD,EAAc;AACvC,SAAO;AACHC,IAAAA,IAAI,EAAEX,sBADH;AAEHY,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,IAAMuB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,SAAO;AACHtB,IAAAA,IAAI,EAAEZ;AADH,GAAP;AAGH,CAJD;;AAMA,IAAMmC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACnB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,EAAkC;AACzD,SAAO;AACHP,IAAAA,IAAI,EAAEV,oBADH;AAEHc,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH,CARD;;AAUA,IAAMiB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACd,cAAD,EAAiBe,iBAAjB,EAAoCd,cAApC,EAAuD;AAC/E,MAAMG,WAAW,GAAG;AAAEJ,IAAAA,cAAc,EAAdA,cAAF;AAAkBe,IAAAA,iBAAiB,EAAjBA;AAAlB,GAApB;AACA,SAAO,UAACV,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACO,kBAAkB,EAAnB,CAAR;AACA,WAAOnC,SAAS,CAAC6B,IAAV,CAAe,iBAAf,EAAkCF,WAAlC,EAA+C,UAACf,QAAD,EAAc;AAChE,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBQ,QAAAA,QAAQ,CAACQ,kBAAkB,CAACnB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAAnB,CAAR;AACH,OAHD,MAGO;AACHQ,QAAAA,QAAQ,CAACM,oBAAoB,CAACtB,QAAD,CAArB,CAAR;AACAgB,QAAAA,QAAQ,CAAClB,mBAAmB,CAACc,cAAD,CAApB,CAAR;AACH;AACJ,KARM,EAQJM,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACZ,MAAJ,KAAe,GAAf,IAAsBY,GAAG,CAACb,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFc,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACQ,kBAAkB,CAAC,EAAD,mBAAeL,GAAG,CAACb,OAAnB,GAA8Ba,GAAG,CAACZ,MAAlC,EAA0C,EAA1C,CAAnB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH,CAnBD,C,CAqBA;;;AACA,IAAMoB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC3B,QAAD,EAAc;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAET,uBADH;AAEHU,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,IAAM4B,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,SAAO;AACH3B,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJD;;AAMA,IAAMoC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACxB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,EAAkC;AAC1D,SAAO;AACHP,IAAAA,IAAI,EAAEP,qBADH;AAEHW,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH,CARD;;AAUA,IAAMsB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACnB,cAAD,EAAiBoB,SAAjB,EAA4BnB,cAA5B,EAA+C;AACxE,MAAMG,WAAW,GAAG;AAAEgB,IAAAA,SAAS,EAATA,SAAF;AAAapB,IAAAA,cAAc,EAAdA;AAAb,GAApB;AACA,SAAO,UAACK,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACY,mBAAmB,EAApB,CAAR;AACA,WAAOxC,SAAS,CAAC6B,IAAV,CAAe,eAAf,EAAgCF,WAAhC,EAA6C,UAACf,QAAD,EAAc;AAC9D,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBQ,QAAAA,QAAQ,CAACa,mBAAmB,CAACxB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAApB,CAAR;AACH,OAHD,MAGO;AACHQ,QAAAA,QAAQ,CAACW,qBAAqB,CAAC3B,QAAD,CAAtB,CAAR;AACAgB,QAAAA,QAAQ,CAAClB,mBAAmB,CAACc,cAAD,CAApB,CAAR;AACH;AACJ,KARM,EAQJM,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACZ,MAAJ,KAAe,GAAf,IAAsBY,GAAG,CAACb,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFc,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACa,mBAAmB,CAAC,EAAD,mBAAeV,GAAG,CAACb,OAAnB,GAA8Ba,GAAG,CAACZ,MAAlC,EAA0C,EAA1C,CAApB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH,CAnBD;;AAsBA,SAASE,mBAAT,EAA8BgB,mBAA9B,EAAmDK,oBAAnD","sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    REMOVE_COMMENT_BEGIN, REMOVE_COMMENT_SUCCESS, REMOVE_COMMENT_ERROR,\n    ADDLIKE_COMMENT_SUCCESS, ADDLIKE_COMMENT_BEGIN, ADDLIKE_COMMENT_ERROR,\n    CREATE_COMMENT_SUCCESS, CREATE_COMMENT_BEGIN, CREATE_COMMENT_ERROR,\n} from './actionTypes';\n\nimport { fetchAllPostsAction } from './postActions'\n\n// createComment\nconst createCommentSuccess = (response) => {\n    return {\n        type: CREATE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst createCommentBegin = () => {\n    return {\n        type: CREATE_COMMENT_BEGIN,\n    }\n}\n\nconst createCommentError = (error, message, status, path) => {\n    return {\n        type: CREATE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst createCommentAction = (postId, loggedInUserId, timelineUserId, content, imageUrl) => {\n    const requestBody = { postId, loggedInUserId, timelineUserId, content, imageUrl }\n    return (dispatch) => {\n        dispatch(createCommentBegin())\n        return requester.post('/comment/create', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(createCommentError(error, message, status, path));\n            } else {\n                dispatch(createCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(createCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// removeComment\nconst removeCommentSuccess = (response) => {\n    return {\n        type: REMOVE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst removeCommentBegin = () => {\n    return {\n        type: REMOVE_COMMENT_BEGIN,\n    }\n}\n\nconst removeCommentError = (error, message, status, path) => {\n    return {\n        type: REMOVE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst removeCommentAction = (loggedInUserId, commentToRemoveId, timelineUserId) => {\n    const requestBody = { loggedInUserId, commentToRemoveId }\n    return (dispatch) => {\n        dispatch(removeCommentBegin())\n        return requester.post('/comment/remove', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(removeCommentError(error, message, status, path));\n            } else {\n                dispatch(removeCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(removeCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// addLike\nconst addLikeCommentSuccess = (response) => {\n    return {\n        type: ADDLIKE_COMMENT_SUCCESS,\n        payload: response\n    }\n}\n\nconst addLikeCommentBegin = () => {\n    return {\n        type: ADDLIKE_COMMENT_BEGIN,\n    }\n}\n\nconst addLikeCommentError = (error, message, status, path) => {\n    return {\n        type: ADDLIKE_COMMENT_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst addLikeCommentAction = (loggedInUserId, commentId, timelineUserId) => {\n    const requestBody = { commentId, loggedInUserId }\n    return (dispatch) => {\n        dispatch(addLikeCommentBegin())\n        return requester.post('/like/comment', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(addLikeCommentError(error, message, status, path));\n            } else {\n                dispatch(addLikeCommentSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(addLikeCommentError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n\nexport { createCommentAction, removeCommentAction, addLikeCommentAction, };"]},"metadata":{},"sourceType":"module"}