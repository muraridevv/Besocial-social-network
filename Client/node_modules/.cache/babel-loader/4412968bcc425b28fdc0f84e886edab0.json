{"ast":null,"code":"import _toConsumableArray from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR, FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR, CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR, CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR } from '../actions/actionTypes'; // fetchAllLogsReducer\n\nvar initialStateFetchAllLogs = {\n  logsArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction fetchAllLogsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateFetchAllLogs;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_ALL_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case FETCH_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: _toConsumableArray(action.payload),\n        hasError: false,\n        error: '',\n        message: 'All logs successfully loaded.',\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case FETCH_ALL_LOGS_ERROR:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    case CLEAR_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // findLogsByUserNameReducer\n\n\nvar initialStateFindLogsByUserName = {\n  logsArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction findLogsByUserNameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateFindLogsByUserName;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FINDBYUSERNAME_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case FINDBYUSERNAME_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        logsArr: _toConsumableArray(action.payload),\n        hasError: false,\n        error: '',\n        message: action.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case FINDBYUSERNAME_LOGS_ERROR:\n      return Object.assign({}, state, {\n        logsArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // clearByUserNameReducer\n\n\nvar initialStateClearLogsByUserName = {\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction clearLogsByUserNameReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateClearLogsByUserName;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CLEARBYUSERNAME_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case CLEARBYUSERNAME_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: action.payload.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case CLEARBYUSERNAME_LOGS_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // clearAllLogsReducer\n\n\nvar initialStateClearAllLogs = {\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction clearAllLogsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateClearAllLogs;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CLEAR_ALL_LOGS_BEGIN:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case CLEAR_ALL_LOGS_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        error: '',\n        message: action.payload.message,\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case CLEAR_ALL_LOGS_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport { fetchAllLogsReducer, findLogsByUserNameReducer, clearLogsByUserNameReducer, clearAllLogsReducer };","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\reducers\\logsReducer.js"],"names":["FETCH_ALL_LOGS_SUCCESS","FETCH_ALL_LOGS_BEGIN","FETCH_ALL_LOGS_ERROR","FINDBYUSERNAME_LOGS_SUCCESS","FINDBYUSERNAME_LOGS_BEGIN","FINDBYUSERNAME_LOGS_ERROR","CLEARBYUSERNAME_LOGS_SUCCESS","CLEARBYUSERNAME_LOGS_BEGIN","CLEARBYUSERNAME_LOGS_ERROR","CLEAR_ALL_LOGS_SUCCESS","CLEAR_ALL_LOGS_BEGIN","CLEAR_ALL_LOGS_ERROR","initialStateFetchAllLogs","logsArr","hasError","error","message","status","path","loading","fetchAllLogsReducer","state","action","type","Object","assign","payload","initialStateFindLogsByUserName","findLogsByUserNameReducer","initialStateClearLogsByUserName","clearLogsByUserNameReducer","initialStateClearAllLogs","clearAllLogsReducer"],"mappings":"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","sourcesContent":["import {\n    FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR,\n    FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR,\n    CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR,\n    CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR,\n} from '../actions/actionTypes';\n\n// fetchAllLogsReducer\nconst initialStateFetchAllLogs = {\n    logsArr: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction fetchAllLogsReducer(state = initialStateFetchAllLogs, action) {\n    switch (action.type) {\n        case FETCH_ALL_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FETCH_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [...action.payload],\n                hasError: false,\n                error: '',\n                message: 'All logs successfully loaded.',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FETCH_ALL_LOGS_ERROR:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        case CLEAR_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// findLogsByUserNameReducer\nconst initialStateFindLogsByUserName = {\n    logsArr: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction findLogsByUserNameReducer(state = initialStateFindLogsByUserName, action) {\n    switch (action.type) {\n        case FINDBYUSERNAME_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FINDBYUSERNAME_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                logsArr: [...action.payload],\n                hasError: false,\n                error: '',\n                message: action.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FINDBYUSERNAME_LOGS_ERROR:\n            return Object.assign({}, state, {\n                logsArr: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// clearByUserNameReducer\nconst initialStateClearLogsByUserName = {\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction clearLogsByUserNameReducer(state = initialStateClearLogsByUserName, action) {\n    switch (action.type) {\n        case CLEARBYUSERNAME_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case CLEARBYUSERNAME_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: action.payload.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case CLEARBYUSERNAME_LOGS_ERROR:\n            return Object.assign({}, state, {\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\n// clearAllLogsReducer\nconst initialStateClearAllLogs = {\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction clearAllLogsReducer(state = initialStateClearAllLogs, action) {\n    switch (action.type) {\n        case CLEAR_ALL_LOGS_BEGIN:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case CLEAR_ALL_LOGS_SUCCESS:\n            return Object.assign({}, state, {\n                hasError: false,\n                error: '',\n                message: action.payload.message,\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case CLEAR_ALL_LOGS_ERROR:\n            return Object.assign({}, state, {\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n    }\n}\n\nexport {\n    fetchAllLogsReducer, findLogsByUserNameReducer, clearLogsByUserNameReducer, clearAllLogsReducer\n}"]},"metadata":{},"sourceType":"module"}