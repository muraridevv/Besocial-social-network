{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALLPOSTS_BEGIN, FETCH_ALLPOSTS_SUCCESS, FETCH_ALLPOSTS_ERROR, REMOVE_POST_BEGIN, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR, ADDLIKE_POST_SUCCESS, ADDLIKE_POST_BEGIN, ADDLIKE_POST_ERROR, CREATE_POST_SUCCESS, CREATE_POST_BEGIN, CREATE_POST_ERROR } from './actionTypes'; // createPost\n\nvar createPostSuccess = function createPostSuccess(response) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    payload: response\n  };\n};\n\nvar createPostBegin = function createPostBegin() {\n  return {\n    type: CREATE_POST_BEGIN\n  };\n};\n\nvar createPostError = function createPostError(error, message, status, path) {\n  return {\n    type: CREATE_POST_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar createPostAction = function createPostAction(timelineUserId, loggedInUserId, content, imageUrl) {\n  var requestBody = {\n    timelineUserId: timelineUserId,\n    loggedInUserId: loggedInUserId,\n    content: content,\n    imageUrl: imageUrl\n  };\n  return function (dispatch) {\n    dispatch(createPostBegin());\n    return requester.post('/post/create', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(createPostError(error, message, status, path));\n      } else {\n        dispatch(createPostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(createPostError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // fetchAllPosts\n\n\nvar fetchAllPostsSuccess = function fetchAllPostsSuccess(allPostsArr) {\n  return {\n    type: FETCH_ALLPOSTS_SUCCESS,\n    payload: allPostsArr\n  };\n};\n\nvar fetchAllPostsBegin = function fetchAllPostsBegin() {\n  return {\n    type: FETCH_ALLPOSTS_BEGIN\n  };\n};\n\nvar fetchAllPostsError = function fetchAllPostsError(error, message, status, path) {\n  return {\n    type: FETCH_ALLPOSTS_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar fetchAllPostsAction = function fetchAllPostsAction(userId) {\n  return function (dispatch) {\n    dispatch(fetchAllPostsBegin());\n    return requester.get('/post/all/' + userId, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(fetchAllPostsError(error, message, status, path));\n      } else {\n        dispatch(fetchAllPostsSuccess(response));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(fetchAllPostsError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // removePost\n\n\nvar removePostSuccess = function removePostSuccess(response) {\n  return {\n    type: REMOVE_POST_SUCCESS,\n    payload: response\n  };\n};\n\nvar removePostBegin = function removePostBegin() {\n  return {\n    type: REMOVE_POST_BEGIN\n  };\n};\n\nvar removePostError = function removePostError(error, message, status, path) {\n  return {\n    type: REMOVE_POST_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar removePostAction = function removePostAction(loggedInUserId, postToRemoveId, timelineUserId) {\n  var requestBody = {\n    loggedInUserId: loggedInUserId,\n    postToRemoveId: postToRemoveId\n  };\n  return function (dispatch) {\n    dispatch(removePostBegin());\n    return requester.post('/post/remove', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(removePostError(error, message, status, path));\n      } else {\n        dispatch(removePostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(removePostError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}; // addLike\n\n\nvar addLikePostSuccess = function addLikePostSuccess(response) {\n  return {\n    type: ADDLIKE_POST_SUCCESS,\n    payload: response\n  };\n};\n\nvar addLikePostBegin = function addLikePostBegin() {\n  return {\n    type: ADDLIKE_POST_BEGIN\n  };\n};\n\nvar addLikePostError = function addLikePostError(error, message, status, path) {\n  return {\n    type: ADDLIKE_POST_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n};\n\nvar addLikePostAction = function addLikePostAction(loggedInUserId, postId, timelineUserId) {\n  var requestBody = {\n    postId: postId,\n    loggedInUserId: loggedInUserId\n  };\n  return function (dispatch) {\n    dispatch(addLikePostBegin());\n    return requester.post('/like/add', requestBody, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(addLikePostError(error, message, status, path));\n      } else {\n        dispatch(addLikePostSuccess(response));\n        dispatch(fetchAllPostsAction(timelineUserId));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(addLikePostError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n};\n\nexport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction };","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\actions\\postActions.js"],"names":["requester","FETCH_ALLPOSTS_BEGIN","FETCH_ALLPOSTS_SUCCESS","FETCH_ALLPOSTS_ERROR","REMOVE_POST_BEGIN","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","ADDLIKE_POST_SUCCESS","ADDLIKE_POST_BEGIN","ADDLIKE_POST_ERROR","CREATE_POST_SUCCESS","CREATE_POST_BEGIN","CREATE_POST_ERROR","createPostSuccess","response","type","payload","createPostBegin","createPostError","error","message","status","path","createPostAction","timelineUserId","loggedInUserId","content","imageUrl","requestBody","dispatch","post","fetchAllPostsAction","catch","err","localStorage","clear","fetchAllPostsSuccess","allPostsArr","fetchAllPostsBegin","fetchAllPostsError","userId","get","removePostSuccess","removePostBegin","removePostError","removePostAction","postToRemoveId","addLikePostSuccess","addLikePostBegin","addLikePostError","addLikePostAction","postId"],"mappings":"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","sourcesContent":["import { requester } from '../../infrastructure';\nimport {\n    FETCH_ALLPOSTS_BEGIN, FETCH_ALLPOSTS_SUCCESS, FETCH_ALLPOSTS_ERROR,\n    REMOVE_POST_BEGIN, REMOVE_POST_SUCCESS, REMOVE_POST_ERROR,\n    ADDLIKE_POST_SUCCESS, ADDLIKE_POST_BEGIN, ADDLIKE_POST_ERROR,\n    CREATE_POST_SUCCESS, CREATE_POST_BEGIN, CREATE_POST_ERROR\n} from './actionTypes';\n\n// createPost\nconst createPostSuccess = (response) => {\n    return {\n        type: CREATE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst createPostBegin = () => {\n    return {\n        type: CREATE_POST_BEGIN,\n    }\n}\n\nconst createPostError = (error, message, status, path) => {\n    return {\n        type: CREATE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst createPostAction = (timelineUserId, loggedInUserId, content, imageUrl) => {\n    const requestBody = { timelineUserId, loggedInUserId, content, imageUrl }\n    return (dispatch) => {\n        dispatch(createPostBegin())\n        return requester.post('/post/create', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(createPostError(error, message, status, path));\n            } else {\n                dispatch(createPostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(createPostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// fetchAllPosts\nconst fetchAllPostsSuccess = (allPostsArr) => {\n    return {\n        type: FETCH_ALLPOSTS_SUCCESS,\n        payload: allPostsArr\n    }\n}\n\nconst fetchAllPostsBegin = () => {\n    return {\n        type: FETCH_ALLPOSTS_BEGIN,\n    }\n}\n\nconst fetchAllPostsError = (error, message, status, path) => {\n    return {\n        type: FETCH_ALLPOSTS_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst fetchAllPostsAction = (userId) => {\n    return (dispatch) => {\n        dispatch(fetchAllPostsBegin())\n        return requester.get('/post/all/' + userId, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(fetchAllPostsError(error, message, status, path));\n            } else {\n                dispatch(fetchAllPostsSuccess(response));\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(fetchAllPostsError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// removePost\nconst removePostSuccess = (response) => {\n    return {\n        type: REMOVE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst removePostBegin = () => {\n    return {\n        type: REMOVE_POST_BEGIN,\n    }\n}\n\nconst removePostError = (error, message, status, path) => {\n    return {\n        type: REMOVE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst removePostAction = (loggedInUserId, postToRemoveId, timelineUserId) => {\n    const requestBody = { loggedInUserId, postToRemoveId }\n    return (dispatch) => {\n        dispatch(removePostBegin())\n        return requester.post('/post/remove', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(removePostError(error, message, status, path));\n            } else {\n                dispatch(removePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(removePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\n// addLike\n\nconst addLikePostSuccess = (response) => {\n    return {\n        type: ADDLIKE_POST_SUCCESS,\n        payload: response\n    }\n}\n\nconst addLikePostBegin = () => {\n    return {\n        type: ADDLIKE_POST_BEGIN,\n    }\n}\n\nconst addLikePostError = (error, message, status, path) => {\n    return {\n        type: ADDLIKE_POST_ERROR,\n        error,\n        message,\n        status,\n        path,\n    }\n}\n\nconst addLikePostAction = (loggedInUserId, postId, timelineUserId) => {\n    const requestBody = { postId, loggedInUserId }\n    return (dispatch) => {\n        dispatch(addLikePostBegin())\n        return requester.post('/like/add', requestBody, (response) => {\n            if (response.error) {\n                const { error, message, status, path } = response;\n                dispatch(addLikePostError(error, message, status, path));\n            } else {\n                dispatch(addLikePostSuccess(response));\n                dispatch(fetchAllPostsAction(timelineUserId))\n            }\n        }).catch(err => {\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n                localStorage.clear();\n            }\n            dispatch(addLikePostError('', `Error: ${err.message}`, err.status, ''));\n        })\n    }\n}\n\nexport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction, };"]},"metadata":{},"sourceType":"module"}