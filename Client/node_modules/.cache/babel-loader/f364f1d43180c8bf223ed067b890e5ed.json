{"ast":null,"code":"import _classCallCheck from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\src\\\\components\\\\home\\\\MainSharedContent.jsx\";\nimport React, { Fragment, Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport Post from './Post';\nimport './css/MainSharedContent.css';\nimport WritePost from './WritePost';\nimport WriteComment from './WriteComment';\nimport { connect } from 'react-redux';\nimport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction } from '../../store/actions/postActions';\nimport { createCommentAction, removeCommentAction, addLikeCommentAction } from '../../store/actions/commentActions';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\n\nvar MainSharedContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainSharedContent, _Component);\n\n  function MainSharedContent(props) {\n    var _this;\n\n    _classCallCheck(this, MainSharedContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainSharedContent).call(this, props));\n\n    _this.componentDidMount = function () {\n      var currentTimeLineUserId = _this.props.match.params.id;\n\n      _this.setState({\n        currentTimeLineUserId: currentTimeLineUserId\n      });\n\n      if (currentTimeLineUserId !== _this.props.timeLineUser.id) {\n        _this.initialDataLoad(currentTimeLineUserId);\n      } else {\n        _this.getAllPosts(currentTimeLineUserId);\n      }\n    };\n\n    _this.initialDataLoad = function (currentTimeLineUserId) {\n      _this.setState({\n        currentTimeLineUserId: currentTimeLineUserId\n      }, function () {\n        _this.props.changeTimeLineUser(currentTimeLineUserId);\n\n        _this.props.changeAllPictures(currentTimeLineUserId);\n\n        _this.props.changeAllFriends(currentTimeLineUserId);\n\n        _this.getAllPosts(currentTimeLineUserId);\n      });\n    };\n\n    _this.addLike = function (postId) {\n      var loggedInUserId = _this.props.loggedInUser.id;\n      var timelineUserId = _this.props.timeLineUser.id;\n\n      _this.props.addLikePost(loggedInUserId, postId, timelineUserId);\n    };\n\n    _this.addLikeComment = function (commentId, event) {\n      var loggedInUserId = _this.props.loggedInUser.id;\n      var timelineUserId = _this.props.timeLineUser.id;\n\n      _this.props.addLikeComment(loggedInUserId, commentId, timelineUserId);\n    };\n\n    _this.state = {\n      currentTimeLineUserId: '',\n      allPostsArr: []\n    };\n    _this.getAllPosts = _this.getAllPosts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addLike = _this.addLike.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removePost = _this.removePost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addLikeComment = _this.addLikeComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeComment = _this.removeComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createPost = _this.createPost.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createComment = _this.createComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MainSharedContent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.currentTimeLineUserId !== this.props.match.params.id) {\n        this.initialDataLoad(this.props.match.params.id);\n      }\n\n      var loading = this.props.fetchAllPosts.loading || this.props.removePost.loading || this.props.removeCommentData.loading || this.props.addLikePostData.loading || this.props.addLikeCommentData.loading || this.props.createPostData.loading || this.props.createCommentData.loading;\n\n      if (!loading && this.state.allPostsArr !== this.props.allPostsArr) {\n        this.setState({\n          allPostsArr: this.props.allPostsArr\n        });\n      }\n\n      var errorMessage = this.getErrorMessage(prevProps, prevState);\n      var successMessage = this.getSuccessMessage(prevProps, prevState);\n\n      if (errorMessage) {\n        toast.error(React.createElement(ToastComponent.errorToast, {\n          text: errorMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      } else if (successMessage) {\n        toast.success(React.createElement(ToastComponent.successToast, {\n          text: successMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }), {\n          position: toast.POSITION.TOP_RIGHT\n        });\n      }\n    }\n  }, {\n    key: \"getSuccessMessage\",\n    value: function getSuccessMessage(prevProps, prevState) {\n      if (!this.props.fetchAllPosts.hasError && this.props.fetchAllPosts.message && this.props.fetchAllPosts !== prevProps.fetchAllPosts) {\n        return this.props.fetchAllPosts.message;\n      } else if (!this.props.removePostData.hasError && this.props.removePostData.message && this.props.removePostData !== prevProps.removePostData) {\n        return this.props.removePostData.message;\n      } else if (!this.props.removeCommentData.hasError && this.props.removeCommentData.message && this.props.removeCommentData !== prevProps.removeCommentData) {\n        return this.props.removeCommentData.message;\n      } else if (!this.props.addLikePostData.hasError && this.props.addLikePostData.message && this.props.addLikePostData !== prevProps.addLikePostData) {\n        return this.props.addLikePostData.message;\n      } else if (!this.props.addLikeCommentData.hasError && this.props.addLikeCommentData.message && this.props.addLikeCommentData !== prevProps.addLikeCommentData) {\n        return this.props.addLikeCommentData.message;\n      } else if (!this.props.createPostData.hasError && this.props.createPostData.message && this.props.createPostData !== prevProps.createPostData) {\n        return this.props.createPostData.message;\n      } else if (!this.props.createCommentData.hasError && this.props.createCommentData.message && this.props.createCommentData !== prevProps.createCommentData) {\n        return this.props.createCommentData.message;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage(prevProps, prevState) {\n      if (this.props.fetchAllPosts.hasError && prevProps.fetchAllPosts.error !== this.props.fetchAllPosts.error) {\n        return this.props.fetchAllPosts.message || 'Server Error';\n      } else if (this.props.removePostData.hasError && prevProps.removePostData.error !== this.props.removePostData.error) {\n        return this.props.removePostData.message || 'Server Error';\n      } else if (this.props.removeCommentData.hasError && prevProps.removeCommentData.error !== this.props.removeCommentData.error) {\n        return this.props.removeCommentData.message || 'Server Error';\n      } else if (this.props.addLikePostData.hasError && prevProps.addLikePostData.error !== this.props.addLikePostData.error) {\n        return this.props.addLikePostData.message || 'Server Error';\n      } else if (this.props.addLikeCommentData.hasError && prevProps.addLikeCommentData.error !== this.props.addLikeCommentData.error) {\n        return this.props.addLikeCommentData.message || 'Server Error';\n      } else if (this.props.createPostData.hasError && prevProps.createPostData.error !== this.props.createPostData.error) {\n        return this.props.createPostData.message || 'Server Error';\n      } else if (this.props.createCommentData.hasError && prevProps.createCommentData.error !== this.props.createCommentData.error) {\n        return this.props.createCommentData.message || 'Server Error';\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAllPosts\",\n    value: function getAllPosts(timelineUserId) {\n      this.props.loadAllPosts(timelineUserId);\n    }\n  }, {\n    key: \"createPost\",\n    value: function createPost(content, imageUrl) {\n      var loggedInUserId = this.props.loggedInUser.id;\n      var timelineUserId = this.props.timeLineUser.id;\n      this.props.createPost(timelineUserId, loggedInUserId, content, imageUrl);\n    }\n  }, {\n    key: \"createComment\",\n    value: function createComment(postId, content, imageUrl) {\n      var loggedInUserId = this.props.loggedInUser.id;\n      var timelineUserId = this.props.timeLineUser.id;\n      this.props.createComment(postId, loggedInUserId, timelineUserId, content, imageUrl);\n    }\n  }, {\n    key: \"removePost\",\n    value: function removePost(postId) {\n      var loggedInUserId = this.props.loggedInUser.id;\n      var timelineUserId = this.props.timeLineUser.id;\n      this.props.removePost(loggedInUserId, postId, timelineUserId);\n    }\n  }, {\n    key: \"removeComment\",\n    value: function removeComment(commentId) {\n      var loggedInUserId = this.props.loggedInUser.id;\n      var timelineUserId = this.props.timeLineUser.id;\n      this.props.removeComment(loggedInUserId, commentId, timelineUserId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"article\", {\n        className: \"main-article-shared-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(WritePost, {\n        loggedInUser: this.props.loggedInUser,\n        createPost: this.createPost,\n        createPostData: this.props.createPostData,\n        loadingAllPosts: this.props.fetchAllPosts.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        className: \"post-content-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, this.state.allPostsArr.map(function (post, index) {\n        return React.createElement(Fragment, {\n          key: post.postId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(Post, Object.assign({\n          addLike: _this2.addLike,\n          removePost: _this2.removePost,\n          addLikeComment: _this2.addLikeComment,\n          removeComment: _this2.removeComment\n        }, post, {\n          timelineUserId: _this2.props.timeLineUser.id,\n          currentLoggedInUserId: _this2.props.loggedInUser.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        })), React.createElement(WriteComment, {\n          timelineUserId: _this2.props.timeLineUser.id,\n          loggedInUser: _this2.props.loggedInUser,\n          getAllPosts: _this2.getAllPosts,\n          createComment: _this2.createComment,\n          createCommentData: _this2.props.createCommentData,\n          loadingAllPosts: _this2.props.fetchAllPosts.loading,\n          postId: post.postId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }]);\n\n  return MainSharedContent;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedInUser: state.loggedInUserData,\n    timeLineUser: state.timeLineUserData,\n    allPostsArr: state.fetchAllPosts.allPostsArr,\n    fetchAllPosts: state.fetchAllPosts,\n    createPostData: state.createPost,\n    removePostData: state.removePost,\n    addLikePostData: state.addLikePost,\n    createCommentData: state.createComment,\n    removeCommentData: state.removeComment,\n    addLikeCommentData: state.addLikeComment\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loadAllPosts: function loadAllPosts(userId) {\n      dispatch(fetchAllPostsAction(userId));\n    },\n    createPost: function createPost(loggedInUserId, postId, timelineUserId) {\n      dispatch(createPostAction(loggedInUserId, postId, timelineUserId));\n    },\n    removePost: function removePost(loggedInUserId, postId, timelineUserId) {\n      dispatch(removePostAction(loggedInUserId, postId, timelineUserId));\n    },\n    addLikePost: function addLikePost(loggedInUserId, postId, timelineUserId) {\n      dispatch(addLikePostAction(loggedInUserId, postId, timelineUserId));\n    },\n    createComment: function createComment(postId, loggedInUserId, timelineUserId, content, imageUrl) {\n      dispatch(createCommentAction(postId, loggedInUserId, timelineUserId, content, imageUrl));\n    },\n    removeComment: function removeComment(loggedInUserId, commentId, timelineUserId) {\n      dispatch(removeCommentAction(loggedInUserId, commentId, timelineUserId));\n    },\n    addLikeComment: function addLikeComment(loggedInUserId, commentId, timelineUserId) {\n      dispatch(addLikeCommentAction(loggedInUserId, commentId, timelineUserId));\n    },\n    changeTimeLineUser: function changeTimeLineUser(userId) {\n      dispatch(changeCurrentTimeLineUserAction(userId));\n    },\n    changeAllFriends: function changeAllFriends(userId) {\n      dispatch(changeAllFriendsAction(userId));\n    },\n    changeAllPictures: function changeAllPictures(userId) {\n      dispatch(changeAllPicturesAction(userId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainSharedContent);","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\components\\home\\MainSharedContent.jsx"],"names":["React","Fragment","Component","toast","ToastComponent","Post","WritePost","WriteComment","connect","createPostAction","fetchAllPostsAction","removePostAction","addLikePostAction","createCommentAction","removeCommentAction","addLikeCommentAction","changeCurrentTimeLineUserAction","changeAllFriendsAction","changeAllPicturesAction","MainSharedContent","props","componentDidMount","currentTimeLineUserId","match","params","id","setState","timeLineUser","initialDataLoad","getAllPosts","changeTimeLineUser","changeAllPictures","changeAllFriends","addLike","postId","loggedInUserId","loggedInUser","timelineUserId","addLikePost","addLikeComment","commentId","event","state","allPostsArr","bind","removePost","removeComment","createPost","createComment","prevProps","prevState","loading","fetchAllPosts","removeCommentData","addLikePostData","addLikeCommentData","createPostData","createCommentData","errorMessage","getErrorMessage","successMessage","getSuccessMessage","error","position","POSITION","TOP_RIGHT","success","hasError","message","removePostData","loadAllPosts","content","imageUrl","map","post","index","mapStateToProps","loggedInUserData","timeLineUserData","mapDispatchToProps","dispatch","userId"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,6BAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,gBAAhD,EAAkEC,iBAAlE,QAA2F,iCAA3F;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,oBAAnD,QAA+E,oCAA/E;AACA,SAASC,+BAAT,EAA0CC,sBAA1C,QAAwE,iCAAxE;AACA,SAASC,uBAAT,QAAwC,oCAAxC;;IAEMC,iB;;;;;AACF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;;AADe,UAiBnBC,iBAjBmB,GAiBC,YAAM;AACtB,UAAMC,qBAAqB,GAAG,MAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAtD;;AACA,YAAKC,QAAL,CAAc;AAAEJ,QAAAA,qBAAqB,EAArBA;AAAF,OAAd;;AAEA,UAAIA,qBAAqB,KAAK,MAAKF,KAAL,CAAWO,YAAX,CAAwBF,EAAtD,EAA0D;AACtD,cAAKG,eAAL,CAAqBN,qBAArB;AACH,OAFD,MAEK;AACD,cAAKO,WAAL,CAAiBP,qBAAjB;AACH;AACJ,KA1BkB;;AAAA,UA6GnBM,eA7GmB,GA6GD,UAACN,qBAAD,EAA2B;AACzC,YAAKI,QAAL,CAAc;AAAEJ,QAAAA,qBAAqB,EAArBA;AAAF,OAAd,EACI,YAAM;AACF,cAAKF,KAAL,CAAWU,kBAAX,CAA8BR,qBAA9B;;AACA,cAAKF,KAAL,CAAWW,iBAAX,CAA6BT,qBAA7B;;AACA,cAAKF,KAAL,CAAWY,gBAAX,CAA4BV,qBAA5B;;AACA,cAAKO,WAAL,CAAiBP,qBAAjB;AACH,OANL;AAQH,KAtHkB;;AAAA,UA8InBW,OA9ImB,GA8IT,UAACC,MAAD,EAAY;AAClB,UAAMC,cAAc,GAAG,MAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,MAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;;AACA,YAAKL,KAAL,CAAWkB,WAAX,CAAuBH,cAAvB,EAAuCD,MAAvC,EAA+CG,cAA/C;AACH,KAlJkB;;AAAA,UA0JnBE,cA1JmB,GA0JF,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACnC,UAAMN,cAAc,GAAG,MAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,MAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;;AACA,YAAKL,KAAL,CAAWmB,cAAX,CAA0BJ,cAA1B,EAA0CK,SAA1C,EAAqDH,cAArD;AACH,KA9JkB;;AAGf,UAAKK,KAAL,GAAa;AACTpB,MAAAA,qBAAqB,EAAE,EADd;AAETqB,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAKA,UAAKd,WAAL,GAAmB,MAAKA,WAAL,CAAiBe,IAAjB,uDAAnB;AACA,UAAKX,OAAL,GAAe,MAAKA,OAAL,CAAaW,IAAb,uDAAf;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,uDAAlB;AACA,UAAKL,cAAL,GAAsB,MAAKA,cAAL,CAAoBK,IAApB,uDAAtB;AACA,UAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,uDAArB;AACA,UAAKG,UAAL,GAAkB,MAAKA,UAAL,CAAgBH,IAAhB,uDAAlB;AACA,UAAKI,aAAL,GAAqB,MAAKA,aAAL,CAAmBJ,IAAnB,uDAArB;AAde;AAelB;;;;uCAakBK,S,EAAWC,S,EAAW;AACrC,UAAI,KAAKR,KAAL,CAAWpB,qBAAX,KAAqC,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAjE,EAAqE;AACjE,aAAKG,eAAL,CAAqB,KAAKR,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AACH;;AAED,UAAM0B,OAAO,GAAG,KAAK/B,KAAL,CAAWgC,aAAX,CAAyBD,OAAzB,IAAoC,KAAK/B,KAAL,CAAWyB,UAAX,CAAsBM,OAA1D,IACZ,KAAK/B,KAAL,CAAWiC,iBAAX,CAA6BF,OADjB,IAC4B,KAAK/B,KAAL,CAAWkC,eAAX,CAA2BH,OADvD,IAEZ,KAAK/B,KAAL,CAAWmC,kBAAX,CAA8BJ,OAFlB,IAE6B,KAAK/B,KAAL,CAAWoC,cAAX,CAA0BL,OAFvD,IAGZ,KAAK/B,KAAL,CAAWqC,iBAAX,CAA6BN,OAHjC;;AAKA,UAAI,CAACA,OAAD,IAAY,KAAKT,KAAL,CAAWC,WAAX,KAA2B,KAAKvB,KAAL,CAAWuB,WAAtD,EAAmE;AAC/D,aAAKjB,QAAL,CAAc;AACViB,UAAAA,WAAW,EAAE,KAAKvB,KAAL,CAAWuB;AADd,SAAd;AAGH;;AAED,UAAMe,YAAY,GAAG,KAAKC,eAAL,CAAqBV,SAArB,EAAgCC,SAAhC,CAArB;AACA,UAAMU,cAAc,GAAG,KAAKC,iBAAL,CAAuBZ,SAAvB,EAAkCC,SAAlC,CAAvB;;AAEA,UAAIQ,YAAJ,EAAkB;AACdvD,QAAAA,KAAK,CAAC2D,KAAN,CAAY,oBAAC,cAAD,CAAgB,UAAhB;AAA2B,UAAA,IAAI,EAAEJ,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAZ,EAA+D;AAC3DK,UAAAA,QAAQ,EAAE5D,KAAK,CAAC6D,QAAN,CAAeC;AADkC,SAA/D;AAGH,OAJD,MAIO,IAAIL,cAAJ,EAAoB;AACvBzD,QAAAA,KAAK,CAAC+D,OAAN,CAAc,oBAAC,cAAD,CAAgB,YAAhB;AAA6B,UAAA,IAAI,EAAEN,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd,EAAqE;AACjEG,UAAAA,QAAQ,EAAE5D,KAAK,CAAC6D,QAAN,CAAeC;AADwC,SAArE;AAGH;AACJ;;;sCAEiBhB,S,EAAWC,S,EAAW;AACpC,UAAI,CAAC,KAAK9B,KAAL,CAAWgC,aAAX,CAAyBe,QAA1B,IAAsC,KAAK/C,KAAL,CAAWgC,aAAX,CAAyBgB,OAA/D,IAA0E,KAAKhD,KAAL,CAAWgC,aAAX,KAA6BH,SAAS,CAACG,aAArH,EAAoI;AAChI,eAAO,KAAKhC,KAAL,CAAWgC,aAAX,CAAyBgB,OAAhC;AACH,OAFD,MAGK,IAAI,CAAC,KAAKhD,KAAL,CAAWiD,cAAX,CAA0BF,QAA3B,IAAuC,KAAK/C,KAAL,CAAWiD,cAAX,CAA0BD,OAAjE,IAA4E,KAAKhD,KAAL,CAAWiD,cAAX,KAA8BpB,SAAS,CAACoB,cAAxH,EAAwI;AACzI,eAAO,KAAKjD,KAAL,CAAWiD,cAAX,CAA0BD,OAAjC;AAEH,OAHI,MAGE,IAAI,CAAC,KAAKhD,KAAL,CAAWiC,iBAAX,CAA6Bc,QAA9B,IAA0C,KAAK/C,KAAL,CAAWiC,iBAAX,CAA6Be,OAAvE,IAAkF,KAAKhD,KAAL,CAAWiC,iBAAX,KAAiCJ,SAAS,CAACI,iBAAjI,EAAoJ;AACvJ,eAAO,KAAKjC,KAAL,CAAWiC,iBAAX,CAA6Be,OAApC;AACH,OAFM,MAGF,IAAI,CAAC,KAAKhD,KAAL,CAAWkC,eAAX,CAA2Ba,QAA5B,IAAwC,KAAK/C,KAAL,CAAWkC,eAAX,CAA2Bc,OAAnE,IAA8E,KAAKhD,KAAL,CAAWkC,eAAX,KAA+BL,SAAS,CAACK,eAA3H,EAA4I;AAC7I,eAAO,KAAKlC,KAAL,CAAWkC,eAAX,CAA2Bc,OAAlC;AACH,OAFI,MAGA,IAAI,CAAC,KAAKhD,KAAL,CAAWmC,kBAAX,CAA8BY,QAA/B,IAA2C,KAAK/C,KAAL,CAAWmC,kBAAX,CAA8Ba,OAAzE,IAAoF,KAAKhD,KAAL,CAAWmC,kBAAX,KAAkCN,SAAS,CAACM,kBAApI,EAAwJ;AACzJ,eAAO,KAAKnC,KAAL,CAAWmC,kBAAX,CAA8Ba,OAArC;AACH,OAFI,MAGA,IAAI,CAAC,KAAKhD,KAAL,CAAWoC,cAAX,CAA0BW,QAA3B,IAAuC,KAAK/C,KAAL,CAAWoC,cAAX,CAA0BY,OAAjE,IAA4E,KAAKhD,KAAL,CAAWoC,cAAX,KAA8BP,SAAS,CAACO,cAAxH,EAAwI;AACzI,eAAO,KAAKpC,KAAL,CAAWoC,cAAX,CAA0BY,OAAjC;AACH,OAFI,MAGA,IAAI,CAAC,KAAKhD,KAAL,CAAWqC,iBAAX,CAA6BU,QAA9B,IAA0C,KAAK/C,KAAL,CAAWqC,iBAAX,CAA6BW,OAAvE,IAAkF,KAAKhD,KAAL,CAAWqC,iBAAX,KAAiCR,SAAS,CAACQ,iBAAjI,EAAoJ;AACrJ,eAAO,KAAKrC,KAAL,CAAWqC,iBAAX,CAA6BW,OAApC;AACH;;AACD,aAAO,IAAP;AACH;;;oCAEenB,S,EAAWC,S,EAAW;AAClC,UAAI,KAAK9B,KAAL,CAAWgC,aAAX,CAAyBe,QAAzB,IAAqClB,SAAS,CAACG,aAAV,CAAwBU,KAAxB,KAAkC,KAAK1C,KAAL,CAAWgC,aAAX,CAAyBU,KAApG,EAA2G;AACvG,eAAO,KAAK1C,KAAL,CAAWgC,aAAX,CAAyBgB,OAAzB,IAAoC,cAA3C;AACH,OAFD,MAGK,IAAI,KAAKhD,KAAL,CAAWiD,cAAX,CAA0BF,QAA1B,IAAsClB,SAAS,CAACoB,cAAV,CAAyBP,KAAzB,KAAmC,KAAK1C,KAAL,CAAWiD,cAAX,CAA0BP,KAAvG,EAA8G;AAC/G,eAAO,KAAK1C,KAAL,CAAWiD,cAAX,CAA0BD,OAA1B,IAAqC,cAA5C;AAEH,OAHI,MAGE,IAAI,KAAKhD,KAAL,CAAWiC,iBAAX,CAA6Bc,QAA7B,IAAyClB,SAAS,CAACI,iBAAV,CAA4BS,KAA5B,KAAsC,KAAK1C,KAAL,CAAWiC,iBAAX,CAA6BS,KAAhH,EAAuH;AAC1H,eAAO,KAAK1C,KAAL,CAAWiC,iBAAX,CAA6Be,OAA7B,IAAwC,cAA/C;AACH,OAFM,MAGF,IAAI,KAAKhD,KAAL,CAAWkC,eAAX,CAA2Ba,QAA3B,IAAuClB,SAAS,CAACK,eAAV,CAA0BQ,KAA1B,KAAoC,KAAK1C,KAAL,CAAWkC,eAAX,CAA2BQ,KAA1G,EAAiH;AAClH,eAAO,KAAK1C,KAAL,CAAWkC,eAAX,CAA2Bc,OAA3B,IAAsC,cAA7C;AACH,OAFI,MAGA,IAAI,KAAKhD,KAAL,CAAWmC,kBAAX,CAA8BY,QAA9B,IAA0ClB,SAAS,CAACM,kBAAV,CAA6BO,KAA7B,KAAuC,KAAK1C,KAAL,CAAWmC,kBAAX,CAA8BO,KAAnH,EAA0H;AAC3H,eAAO,KAAK1C,KAAL,CAAWmC,kBAAX,CAA8Ba,OAA9B,IAAyC,cAAhD;AACH,OAFI,MAGA,IAAI,KAAKhD,KAAL,CAAWoC,cAAX,CAA0BW,QAA1B,IAAsClB,SAAS,CAACO,cAAV,CAAyBM,KAAzB,KAAmC,KAAK1C,KAAL,CAAWoC,cAAX,CAA0BM,KAAvG,EAA8G;AAC/G,eAAO,KAAK1C,KAAL,CAAWoC,cAAX,CAA0BY,OAA1B,IAAqC,cAA5C;AACH,OAFI,MAGA,IAAI,KAAKhD,KAAL,CAAWqC,iBAAX,CAA6BU,QAA7B,IAAyClB,SAAS,CAACQ,iBAAV,CAA4BK,KAA5B,KAAsC,KAAK1C,KAAL,CAAWqC,iBAAX,CAA6BK,KAAhH,EAAuH;AACxH,eAAO,KAAK1C,KAAL,CAAWqC,iBAAX,CAA6BW,OAA7B,IAAwC,cAA/C;AACH;;AAED,aAAO,IAAP;AACH;;;gCAaW/B,c,EAAgB;AACxB,WAAKjB,KAAL,CAAWkD,YAAX,CAAwBjC,cAAxB;AACH;;;+BAEUkC,O,EAASC,Q,EAAU;AAC1B,UAAMrC,cAAc,GAAG,KAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,KAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;AACA,WAAKL,KAAL,CAAW2B,UAAX,CAAsBV,cAAtB,EAAsCF,cAAtC,EAAsDoC,OAAtD,EAA+DC,QAA/D;AACH;;;kCAEatC,M,EAAQqC,O,EAASC,Q,EAAU;AACrC,UAAMrC,cAAc,GAAG,KAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,KAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;AACA,WAAKL,KAAL,CAAW4B,aAAX,CAAyBd,MAAzB,EAAiCC,cAAjC,EAAiDE,cAAjD,EAAiEkC,OAAjE,EAA0EC,QAA1E;AACH;;;+BAEUtC,M,EAAQ;AACf,UAAMC,cAAc,GAAG,KAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,KAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;AACA,WAAKL,KAAL,CAAWyB,UAAX,CAAsBV,cAAtB,EAAsCD,MAAtC,EAA8CG,cAA9C;AACH;;;kCAQaG,S,EAAW;AACrB,UAAML,cAAc,GAAG,KAAKf,KAAL,CAAWgB,YAAX,CAAwBX,EAA/C;AACA,UAAMY,cAAc,GAAG,KAAKjB,KAAL,CAAWO,YAAX,CAAwBF,EAA/C;AACA,WAAKL,KAAL,CAAW0B,aAAX,CAAyBX,cAAzB,EAAyCK,SAAzC,EAAoDH,cAApD;AACH;;;6BAQQ;AAAA;;AACL,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAS,QAAA,SAAS,EAAC,6BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,YAAY,EAAE,KAAKjB,KAAL,CAAWgB,YAD7B;AAEI,QAAA,UAAU,EAAE,KAAKW,UAFrB;AAGI,QAAA,cAAc,EAAE,KAAK3B,KAAL,CAAWoC,cAH/B;AAII,QAAA,eAAe,EAAE,KAAKpC,KAAL,CAAWgC,aAAX,CAAyBD,OAJ9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI;AAAS,QAAA,SAAS,EAAC,sBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKT,KAAL,CAAWC,WAAX,CAAuB8B,GAAvB,CAA2B,UAACC,IAAD,EAAOC,KAAP;AAAA,eACxB,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAED,IAAI,CAACxC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AACI,UAAA,OAAO,EAAE,MAAI,CAACD,OADlB;AAEI,UAAA,UAAU,EAAE,MAAI,CAACY,UAFrB;AAGI,UAAA,cAAc,EAAE,MAAI,CAACN,cAHzB;AAII,UAAA,aAAa,EAAE,MAAI,CAACO;AAJxB,WAKQ4B,IALR;AAMI,UAAA,cAAc,EAAE,MAAI,CAACtD,KAAL,CAAWO,YAAX,CAAwBF,EAN5C;AAOI,UAAA,qBAAqB,EAAE,MAAI,CAACL,KAAL,CAAWgB,YAAX,CAAwBX,EAPnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,EAWI,oBAAC,YAAD;AACI,UAAA,cAAc,EAAE,MAAI,CAACL,KAAL,CAAWO,YAAX,CAAwBF,EAD5C;AAEI,UAAA,YAAY,EAAE,MAAI,CAACL,KAAL,CAAWgB,YAF7B;AAGI,UAAA,WAAW,EAAE,MAAI,CAACP,WAHtB;AAII,UAAA,aAAa,EAAE,MAAI,CAACmB,aAJxB;AAKI,UAAA,iBAAiB,EAAE,MAAI,CAAC5B,KAAL,CAAWqC,iBALlC;AAMI,UAAA,eAAe,EAAE,MAAI,CAACrC,KAAL,CAAWgC,aAAX,CAAyBD,OAN9C;AAOI,UAAA,MAAM,EAAEuB,IAAI,CAACxC,MAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXJ,CADwB;AAAA,OAA3B,CADL,CAPJ,CADJ,CADJ;AAqCH;;;;EAvM2BhC,S;;AA0MhC,IAAM0E,eAAe,GAAG,SAAlBA,eAAkB,CAAClC,KAAD,EAAW;AAC/B,SAAO;AACHN,IAAAA,YAAY,EAAEM,KAAK,CAACmC,gBADjB;AAEHlD,IAAAA,YAAY,EAAEe,KAAK,CAACoC,gBAFjB;AAIHnC,IAAAA,WAAW,EAAED,KAAK,CAACU,aAAN,CAAoBT,WAJ9B;AAKHS,IAAAA,aAAa,EAAEV,KAAK,CAACU,aALlB;AAOHI,IAAAA,cAAc,EAAEd,KAAK,CAACK,UAPnB;AAQHsB,IAAAA,cAAc,EAAE3B,KAAK,CAACG,UARnB;AASHS,IAAAA,eAAe,EAAEZ,KAAK,CAACJ,WATpB;AAWHmB,IAAAA,iBAAiB,EAAEf,KAAK,CAACM,aAXtB;AAYHK,IAAAA,iBAAiB,EAAEX,KAAK,CAACI,aAZtB;AAaHS,IAAAA,kBAAkB,EAAEb,KAAK,CAACH;AAbvB,GAAP;AAeH,CAhBD;;AAkBA,IAAMwC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHV,IAAAA,YAAY,EAAE,sBAACW,MAAD,EAAY;AAAED,MAAAA,QAAQ,CAACtE,mBAAmB,CAACuE,MAAD,CAApB,CAAR;AAAuC,KADhE;AAEHlC,IAAAA,UAAU,EAAE,oBAACZ,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,EAA4C;AAAE2C,MAAAA,QAAQ,CAACvE,gBAAgB,CAAC0B,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,CAAjB,CAAR;AAAoE,KAF3H;AAGHQ,IAAAA,UAAU,EAAE,oBAACV,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,EAA4C;AAAE2C,MAAAA,QAAQ,CAACrE,gBAAgB,CAACwB,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,CAAjB,CAAR;AAAoE,KAH3H;AAIHC,IAAAA,WAAW,EAAE,qBAACH,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,EAA4C;AAAE2C,MAAAA,QAAQ,CAACpE,iBAAiB,CAACuB,cAAD,EAAiBD,MAAjB,EAAyBG,cAAzB,CAAlB,CAAR;AAAqE,KAJ7H;AAKHW,IAAAA,aAAa,EAAE,uBAACd,MAAD,EAASC,cAAT,EAAyBE,cAAzB,EAAyCkC,OAAzC,EAAkDC,QAAlD,EAA+D;AAAEQ,MAAAA,QAAQ,CAACnE,mBAAmB,CAACqB,MAAD,EAASC,cAAT,EAAyBE,cAAzB,EAAyCkC,OAAzC,EAAkDC,QAAlD,CAApB,CAAR;AAA0F,KALvK;AAMH1B,IAAAA,aAAa,EAAE,uBAACX,cAAD,EAAiBK,SAAjB,EAA4BH,cAA5B,EAA+C;AAAE2C,MAAAA,QAAQ,CAAClE,mBAAmB,CAACqB,cAAD,EAAiBK,SAAjB,EAA4BH,cAA5B,CAApB,CAAR;AAA0E,KANvI;AAOHE,IAAAA,cAAc,EAAE,wBAACJ,cAAD,EAAiBK,SAAjB,EAA4BH,cAA5B,EAA+C;AAAE2C,MAAAA,QAAQ,CAACjE,oBAAoB,CAACoB,cAAD,EAAiBK,SAAjB,EAA4BH,cAA5B,CAArB,CAAR;AAA2E,KAPzI;AAQHP,IAAAA,kBAAkB,EAAE,4BAACmD,MAAD,EAAY;AAAED,MAAAA,QAAQ,CAAChE,+BAA+B,CAACiE,MAAD,CAAhC,CAAR;AAAmD,KARlF;AASHjD,IAAAA,gBAAgB,EAAE,0BAACiD,MAAD,EAAY;AAAED,MAAAA,QAAQ,CAAC/D,sBAAsB,CAACgE,MAAD,CAAvB,CAAR;AAA0C,KATvE;AAUHlD,IAAAA,iBAAiB,EAAE,2BAACkD,MAAD,EAAY;AAAED,MAAAA,QAAQ,CAAC9D,uBAAuB,CAAC+D,MAAD,CAAxB,CAAR;AAA2C;AAVzE,GAAP;AAYH,CAbD;;AAgBA,eAAezE,OAAO,CAACoE,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C5D,iBAA7C,CAAf","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { toast } from 'react-toastify';\nimport { ToastComponent } from '../common';\nimport Post from './Post';\nimport './css/MainSharedContent.css'\nimport WritePost from './WritePost';\nimport WriteComment from './WriteComment';\n\nimport { connect } from 'react-redux';\nimport { createPostAction, fetchAllPostsAction, removePostAction, addLikePostAction } from '../../store/actions/postActions';\nimport { createCommentAction, removeCommentAction, addLikeCommentAction } from '../../store/actions/commentActions';\nimport { changeCurrentTimeLineUserAction, changeAllFriendsAction } from '../../store/actions/userActions';\nimport { changeAllPicturesAction } from '../../store/actions/pictureActions';\n\nclass MainSharedContent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentTimeLineUserId: '',\n            allPostsArr: [],\n        };\n\n        this.getAllPosts = this.getAllPosts.bind(this);\n        this.addLike = this.addLike.bind(this);\n        this.removePost = this.removePost.bind(this);\n        this.addLikeComment = this.addLikeComment.bind(this);\n        this.removeComment = this.removeComment.bind(this);\n        this.createPost = this.createPost.bind(this);\n        this.createComment = this.createComment.bind(this);\n    }\n\n    componentDidMount = () => {\n        const currentTimeLineUserId = this.props.match.params.id\n        this.setState({ currentTimeLineUserId });\n\n        if (currentTimeLineUserId !== this.props.timeLineUser.id) {\n            this.initialDataLoad(currentTimeLineUserId);\n        }else{\n            this.getAllPosts(currentTimeLineUserId);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.currentTimeLineUserId !== this.props.match.params.id) {\n            this.initialDataLoad(this.props.match.params.id);\n        }\n\n        const loading = this.props.fetchAllPosts.loading || this.props.removePost.loading ||\n            this.props.removeCommentData.loading || this.props.addLikePostData.loading ||\n            this.props.addLikeCommentData.loading || this.props.createPostData.loading ||\n            this.props.createCommentData.loading;\n\n        if (!loading && this.state.allPostsArr !== this.props.allPostsArr) {\n            this.setState({\n                allPostsArr: this.props.allPostsArr\n            })\n        }\n\n        const errorMessage = this.getErrorMessage(prevProps, prevState);\n        const successMessage = this.getSuccessMessage(prevProps, prevState)\n\n        if (errorMessage) {\n            toast.error(<ToastComponent.errorToast text={errorMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        } else if (successMessage) {\n            toast.success(<ToastComponent.successToast text={successMessage} />, {\n                position: toast.POSITION.TOP_RIGHT\n            });\n        }\n    }\n\n    getSuccessMessage(prevProps, prevState) {\n        if (!this.props.fetchAllPosts.hasError && this.props.fetchAllPosts.message && this.props.fetchAllPosts !== prevProps.fetchAllPosts) {\n            return this.props.fetchAllPosts.message;\n        }\n        else if (!this.props.removePostData.hasError && this.props.removePostData.message && this.props.removePostData !== prevProps.removePostData) {\n            return this.props.removePostData.message;\n\n        } else if (!this.props.removeCommentData.hasError && this.props.removeCommentData.message && this.props.removeCommentData !== prevProps.removeCommentData) {\n            return this.props.removeCommentData.message;\n        }\n        else if (!this.props.addLikePostData.hasError && this.props.addLikePostData.message && this.props.addLikePostData !== prevProps.addLikePostData) {\n            return this.props.addLikePostData.message;\n        }\n        else if (!this.props.addLikeCommentData.hasError && this.props.addLikeCommentData.message && this.props.addLikeCommentData !== prevProps.addLikeCommentData) {\n            return this.props.addLikeCommentData.message;\n        }\n        else if (!this.props.createPostData.hasError && this.props.createPostData.message && this.props.createPostData !== prevProps.createPostData) {\n            return this.props.createPostData.message;\n        }\n        else if (!this.props.createCommentData.hasError && this.props.createCommentData.message && this.props.createCommentData !== prevProps.createCommentData) {\n            return this.props.createCommentData.message;\n        }\n        return null;\n    }\n\n    getErrorMessage(prevProps, prevState) {\n        if (this.props.fetchAllPosts.hasError && prevProps.fetchAllPosts.error !== this.props.fetchAllPosts.error) {\n            return this.props.fetchAllPosts.message || 'Server Error';\n        }\n        else if (this.props.removePostData.hasError && prevProps.removePostData.error !== this.props.removePostData.error) {\n            return this.props.removePostData.message || 'Server Error';\n\n        } else if (this.props.removeCommentData.hasError && prevProps.removeCommentData.error !== this.props.removeCommentData.error) {\n            return this.props.removeCommentData.message || 'Server Error';\n        }\n        else if (this.props.addLikePostData.hasError && prevProps.addLikePostData.error !== this.props.addLikePostData.error) {\n            return this.props.addLikePostData.message || 'Server Error';\n        }\n        else if (this.props.addLikeCommentData.hasError && prevProps.addLikeCommentData.error !== this.props.addLikeCommentData.error) {\n            return this.props.addLikeCommentData.message || 'Server Error';\n        }\n        else if (this.props.createPostData.hasError && prevProps.createPostData.error !== this.props.createPostData.error) {\n            return this.props.createPostData.message || 'Server Error';\n        }\n        else if (this.props.createCommentData.hasError && prevProps.createCommentData.error !== this.props.createCommentData.error) {\n            return this.props.createCommentData.message || 'Server Error';\n        }\n\n        return null;\n    }\n\n    initialDataLoad = (currentTimeLineUserId) => {\n        this.setState({ currentTimeLineUserId },\n            () => {\n                this.props.changeTimeLineUser(currentTimeLineUserId);\n                this.props.changeAllPictures(currentTimeLineUserId);\n                this.props.changeAllFriends(currentTimeLineUserId);\n                this.getAllPosts(currentTimeLineUserId);\n            }\n        )\n    }\n\n    getAllPosts(timelineUserId) {\n        this.props.loadAllPosts(timelineUserId);\n    }\n\n    createPost(content, imageUrl) {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.createPost(timelineUserId, loggedInUserId, content, imageUrl);\n    }\n\n    createComment(postId, content, imageUrl) {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.createComment(postId, loggedInUserId, timelineUserId, content, imageUrl);\n    }\n\n    removePost(postId) {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.removePost(loggedInUserId, postId, timelineUserId);\n    }\n\n    addLike = (postId) => {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.addLikePost(loggedInUserId, postId, timelineUserId);\n    }\n\n    removeComment(commentId) {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.removeComment(loggedInUserId, commentId, timelineUserId);\n    }\n\n    addLikeComment = (commentId, event) => {\n        const loggedInUserId = this.props.loggedInUser.id;\n        const timelineUserId = this.props.timeLineUser.id;\n        this.props.addLikeComment(loggedInUserId, commentId, timelineUserId);\n    }\n\n    render() {\n        return (\n            <Fragment >\n                <article className=\"main-article-shared-content\">\n                    <WritePost\n                        loggedInUser={this.props.loggedInUser}\n                        createPost={this.createPost}\n                        createPostData={this.props.createPostData}\n                        loadingAllPosts={this.props.fetchAllPosts.loading}\n                    />\n                    <section className=\"post-content-section\">\n                        {this.state.allPostsArr.map((post, index) =>\n                            <Fragment key={post.postId}>\n                                <Post\n                                    addLike={this.addLike}\n                                    removePost={this.removePost}\n                                    addLikeComment={this.addLikeComment}\n                                    removeComment={this.removeComment}\n                                    {...post}\n                                    timelineUserId={this.props.timeLineUser.id}\n                                    currentLoggedInUserId={this.props.loggedInUser.id}\n                                />\n\n                                <WriteComment\n                                    timelineUserId={this.props.timeLineUser.id}\n                                    loggedInUser={this.props.loggedInUser}\n                                    getAllPosts={this.getAllPosts}\n                                    createComment={this.createComment}\n                                    createCommentData={this.props.createCommentData}\n                                    loadingAllPosts={this.props.fetchAllPosts.loading}\n                                    postId={post.postId}\n                                />\n                            </Fragment >\n                        )}\n                    </section>\n                </article>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loggedInUser: state.loggedInUserData,\n        timeLineUser: state.timeLineUserData,\n\n        allPostsArr: state.fetchAllPosts.allPostsArr,\n        fetchAllPosts: state.fetchAllPosts,\n\n        createPostData: state.createPost,\n        removePostData: state.removePost,\n        addLikePostData: state.addLikePost,\n\n        createCommentData: state.createComment,\n        removeCommentData: state.removeComment,\n        addLikeCommentData: state.addLikeComment,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadAllPosts: (userId) => { dispatch(fetchAllPostsAction(userId)) },\n        createPost: (loggedInUserId, postId, timelineUserId) => { dispatch(createPostAction(loggedInUserId, postId, timelineUserId)) },\n        removePost: (loggedInUserId, postId, timelineUserId) => { dispatch(removePostAction(loggedInUserId, postId, timelineUserId)) },\n        addLikePost: (loggedInUserId, postId, timelineUserId) => { dispatch(addLikePostAction(loggedInUserId, postId, timelineUserId)) },\n        createComment: (postId, loggedInUserId, timelineUserId, content, imageUrl) => { dispatch(createCommentAction(postId, loggedInUserId, timelineUserId, content, imageUrl)) },\n        removeComment: (loggedInUserId, commentId, timelineUserId) => { dispatch(removeCommentAction(loggedInUserId, commentId, timelineUserId)) },\n        addLikeComment: (loggedInUserId, commentId, timelineUserId) => { dispatch(addLikeCommentAction(loggedInUserId, commentId, timelineUserId)) },\n        changeTimeLineUser: (userId) => { dispatch(changeCurrentTimeLineUserAction(userId)) },\n        changeAllFriends: (userId) => { dispatch(changeAllFriendsAction(userId)) },\n        changeAllPictures: (userId) => { dispatch(changeAllPicturesAction(userId)) },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainSharedContent);"]},"metadata":{},"sourceType":"module"}