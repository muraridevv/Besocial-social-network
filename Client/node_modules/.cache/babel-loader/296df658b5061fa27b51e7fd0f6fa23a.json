{"ast":null,"code":"import _toConsumableArray from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE, FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, LOAD_USER_MESSAGES } from '../actions/actionTypes'; // fetchAllMessagesReducer\n\nvar initialStateAllChatFriends = {\n  allMessagesArr: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction fetchAllMessagesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateAllChatFriends;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_ALLMESSAGES_BEGIN:\n      return Object.assign({}, state, {\n        allMessagesArr: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case FETCH_ALLMESSAGES_SUCCESS:\n      return Object.assign({}, state, {\n        allMessagesArr: _toConsumableArray(action.payload),\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case FETCH_ALLMESSAGES_ERROR:\n      return Object.assign({}, state, {\n        allMessagesArr: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    case ADD_MESSAGE:\n      return Object.assign({}, state, {\n        allMessagesArr: [].concat(_toConsumableArray(state.allMessagesArr), [action.payload]),\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // fetchAllUnreadMessagesReducer\n\n\nvar initialStateAllUnreadMessages = {\n  allUnreadMessages: [],\n  hasError: false,\n  error: '',\n  message: '',\n  status: '',\n  path: '',\n  loading: false\n};\n\nfunction fetchAllUnreadMessagesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateAllUnreadMessages;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_UNREADMESSAGES_BEGIN:\n      return Object.assign({}, state, {\n        allUnreadMessages: [],\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: true\n      });\n\n    case FETCH_UNREADMESSAGES_SUCCESS:\n      return Object.assign({}, state, {\n        allUnreadMessages: _toConsumableArray(action.payload),\n        hasError: false,\n        error: '',\n        message: '',\n        status: '',\n        path: '',\n        loading: false\n      });\n\n    case FETCH_UNREADMESSAGES_ERROR:\n      return Object.assign({}, state, {\n        allUnreadMessages: [],\n        hasError: true,\n        error: action.error,\n        message: action.message,\n        status: action.status,\n        path: action.path,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n} // triggerMessageLoadAction\n\n\nfunction triggerMessageLoadReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_USER_MESSAGES:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n\nexport { fetchAllMessagesReducer, fetchAllUnreadMessagesReducer, triggerMessageLoadReducer };","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\reducers\\messagesReducer.js"],"names":["FETCH_ALLMESSAGES_BEGIN","FETCH_ALLMESSAGES_SUCCESS","FETCH_ALLMESSAGES_ERROR","ADD_MESSAGE","FETCH_UNREADMESSAGES_SUCCESS","FETCH_UNREADMESSAGES_BEGIN","FETCH_UNREADMESSAGES_ERROR","LOAD_USER_MESSAGES","initialStateAllChatFriends","allMessagesArr","hasError","error","message","status","path","loading","fetchAllMessagesReducer","state","action","type","Object","assign","payload","initialStateAllUnreadMessages","allUnreadMessages","fetchAllUnreadMessagesReducer","triggerMessageLoadReducer"],"mappings":"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","sourcesContent":["import {\n    FETCH_ALLMESSAGES_BEGIN, FETCH_ALLMESSAGES_SUCCESS, FETCH_ALLMESSAGES_ERROR, ADD_MESSAGE,\n    FETCH_UNREADMESSAGES_SUCCESS, FETCH_UNREADMESSAGES_BEGIN, FETCH_UNREADMESSAGES_ERROR, \n    LOAD_USER_MESSAGES,\n} from '../actions/actionTypes';\n\n// fetchAllMessagesReducer\nconst initialStateAllChatFriends = {\n    allMessagesArr: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction fetchAllMessagesReducer(state = initialStateAllChatFriends, action) {\n    switch (action.type) {\n        case FETCH_ALLMESSAGES_BEGIN:\n            return Object.assign({}, state, {\n                allMessagesArr: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FETCH_ALLMESSAGES_SUCCESS:\n            return Object.assign({}, state, {\n                allMessagesArr: [...action.payload],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FETCH_ALLMESSAGES_ERROR:\n            return Object.assign({}, state, {\n                allMessagesArr: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        case ADD_MESSAGE:\n            return Object.assign({}, state, {\n                allMessagesArr: [...state.allMessagesArr, action.payload],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n\n    }\n}\n\n// fetchAllUnreadMessagesReducer\nconst initialStateAllUnreadMessages = {\n    allUnreadMessages: [],\n    hasError: false,\n    error: '',\n    message: '',\n    status: '',\n    path: '',\n    loading: false,\n}\n\nfunction fetchAllUnreadMessagesReducer(state = initialStateAllUnreadMessages, action) {\n    switch (action.type) {\n        case FETCH_UNREADMESSAGES_BEGIN:\n            return Object.assign({}, state, {\n                allUnreadMessages: [],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: true,\n            })\n        case FETCH_UNREADMESSAGES_SUCCESS:\n            return Object.assign({}, state, {\n                allUnreadMessages: [...action.payload],\n                hasError: false,\n                error: '',\n                message: '',\n                status: '',\n                path: '',\n                loading: false,\n            })\n        case FETCH_UNREADMESSAGES_ERROR:\n            return Object.assign({}, state, {\n                allUnreadMessages: [],\n                hasError: true,\n                error: action.error,\n                message: action.message,\n                status: action.status,\n                path: action.path,\n                loading: false,\n            })\n        default:\n            return state\n\n    }\n}\n\n// triggerMessageLoadAction\nfunction triggerMessageLoadReducer(state = {}, action) {\n    switch (action.type) {\n        case LOAD_USER_MESSAGES:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport {\n    fetchAllMessagesReducer, fetchAllUnreadMessagesReducer, triggerMessageLoadReducer,\n}"]},"metadata":{},"sourceType":"module"}