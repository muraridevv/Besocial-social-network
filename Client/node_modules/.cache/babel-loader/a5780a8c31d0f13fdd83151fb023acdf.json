{"ast":null,"code":"import _toConsumableArray from \"G:\\\\WORKSPACE\\\\Project\\\\Besocial\\\\Besocial\\\\Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { LOGOUT_SUCCESS } from './actions/actionTypes';\nvar composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nvar appReducer = combineReducers(reducers);\nvar middleware = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n  middleware = [].concat(_toConsumableArray(middleware), [logger]);\n} else {\n  middleware = _toConsumableArray(middleware);\n}\n\nvar rootReducer = function rootReducer(state, action) {\n  if (action.type === LOGOUT_SUCCESS) {\n    state = undefined;\n  }\n\n  return appReducer(state, action);\n};\n\nvar store = createStore(rootReducer, composeEnhancers(applyMiddleware.apply(void 0, _toConsumableArray(middleware))));\nexport default store;","map":{"version":3,"sources":["G:\\WORKSPACE\\Project\\Besocial\\Besocial\\Client\\src\\store\\store.js"],"names":["createStore","combineReducers","applyMiddleware","compose","reducers","thunk","logger","LOGOUT_SUCCESS","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","appReducer","middleware","process","env","NODE_ENV","rootReducer","state","action","type","undefined","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CP,OAAxE;AACA,IAAMQ,UAAU,GAAGV,eAAe,CAACG,QAAD,CAAlC;AAEA,IAAIQ,UAAU,GAAG,CAACP,KAAD,CAAjB;;AAEA,IAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCH,EAAAA,UAAU,gCAAOA,UAAP,IAAmBN,MAAnB,EAAV;AACH,CAFD,MAEO;AACHM,EAAAA,UAAU,sBAAOA,UAAP,CAAV;AACH;;AAED,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgBZ,cAApB,EAAoC;AAChCU,IAAAA,KAAK,GAAGG,SAAR;AACH;;AAED,SAAOT,UAAU,CAACM,KAAD,EAAQC,MAAR,CAAjB;AACH,CAND;;AAQA,IAAMG,KAAK,GAAGrB,WAAW,CAACgB,WAAD,EAAcR,gBAAgB,CAACN,eAAe,MAAf,4BAAmBU,UAAnB,EAAD,CAA9B,CAAzB;AAEA,eAAeS,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport reducers from './reducers'\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { LOGOUT_SUCCESS } from './actions/actionTypes'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst appReducer = combineReducers(reducers);\n\nlet middleware = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware = [...middleware, logger];\n} else {\n    middleware = [...middleware];\n}\n\nconst rootReducer = (state, action) => {\n    if (action.type === LOGOUT_SUCCESS) {\n        state = undefined;\n    }\n\n    return appReducer(state, action)\n}\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\n\nexport default store;"]},"metadata":{},"sourceType":"module"}